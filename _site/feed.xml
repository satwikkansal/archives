<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2017-07-24T15:11:38+05:30</updated><id>http://localhost:4000/blog/</id><title type="html">Satwik Kansal’s blog</title><subtitle>Freelance Software Developer and Open Source enthusiast experienced in Data Science and Web Development.
</subtitle><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><entry><title type="html">GSoC - Final Week Of Phase 2</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Final-Week-Of-Phase-2/" rel="alternate" type="text/html" title="GSoC - Final Week Of Phase 2" /><published>2017-07-24T14:40:36+05:30</published><updated>2017-07-24T14:40:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC:-Final-Week-Of-Phase-2</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Final-Week-Of-Phase-2/">&lt;p&gt;Hello world! I’m back with another post of my GSoC journey. I’m into my final week of Phase 2 and will be filling out the evaluations very soon (&lt;strong&gt;excited!&lt;/strong&gt;). This phase was essentially the &lt;strong&gt;core&lt;/strong&gt; of my GSoC project. Here’s what I’ve done in past two weeks since my last update.&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TLDR;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Got the cEP (coala’s Enhancement Proposal) merged after review by my mentor.&lt;/li&gt;
  &lt;li&gt;Performed a couple more iterations of my &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt; PR and got it merged after reviews from my mentors and fellow GSoCers.&lt;/li&gt;
  &lt;li&gt;Submitted a &lt;strong&gt;very long&lt;/strong&gt; PR for the actual implementation of my cEP and managed to get it merged after heavy reviews.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s my burndown chart&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.postimg.org/zelq6z8tb/burndown.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s pretty erratic this time because we decided to work on multiple issues a week so that we have a fair idea in mind of how everything is going to line up together to work in sync, and this is what I ended up with&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s4.postimg.org/i4c9u9swd/Screenshot_from_2017-07-23_22-34-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PS: I realized that it’s better to manage 3-4 short PRs than one giant PR and had hard time in making changes to PR, maintaining logical order of commits, and having the all the CI services to successfully build the project with updated changes.&lt;/p&gt;

&lt;h3 id=&quot;diving-into-the-details&quot;&gt;Diving into the details&lt;/h3&gt;

&lt;p&gt;I mentioned that &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt; PR is in good shape in my previous post, but it wasn’t! I had some silly mistakes and some code which had very high complexity be it be time complexity or cyclomatic complexity. I spent some more time to refine it after reviews and got it merged. &lt;code class=&quot;highlighter-rouge&quot;&gt;Gruntfile.js&lt;/code&gt; has lot of metadata that can be useful for coala-quickstart to generate enhanced configuration file (&lt;code class=&quot;highlighter-rouge&quot;&gt;.coafile&lt;/code&gt;) for coala.&lt;/p&gt;

&lt;p&gt;My cEP implementation can be seen broadly in terms of following 3 tasks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Autofilling values for settings of sections in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.coafile&lt;/code&gt; generated by coala-quickstart. Currently we use files like &lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Gruntfile.js&lt;/code&gt; to achieve this. Also, coala-quickstart is now able to detect inconsistency in the various configurations across such files.&lt;/li&gt;
  &lt;li&gt;Use information from dependency files (like &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;) to suggest relevant information for bears.&lt;/li&gt;
  &lt;li&gt;Ask users explicitly for capabilities they want for their bears and filter bears accordingly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The ultimate goal of coala-quickstart is “To do all the boilerplate work for coala and generate a highly relevant &lt;code class=&quot;highlighter-rouge&quot;&gt;.coafile&lt;/code&gt; without minimum possible user involvement(or no inovolvement at all in the ideal case)”. After all the above three mentioned tasks implemented, we get a step closer to achieve high automation and accuracy with quickstart.&lt;/p&gt;

&lt;p&gt;Also, coala-quickstart now works online! To try it out, go to https://coala.io/#!/coalaonline , and just enter your repository url (credits to &lt;a href=&quot;https://github.com/hemangsk&quot;&gt;Hemang&lt;/a&gt;). It’s in beta right now, so if you experience any glitches, feel free to report it &lt;a href=&quot;https://gitlab.com/coala/landing/issues/new?issue&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;We have two choices now, either to go ahead with my proposal and make improvements to CLI and pursue some stretch goals if time allows, or to further refine my work in Phase 2 and focus on “recommending relevant and useful Bears” to the users. We’ll be discussing this in next weekly meeting which is gonna happen very soon.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/adtac&quot;&gt;Adhityaa&lt;/a&gt; (my primary mentor) for managing out sufficient time for the project even after his internship. Also, he has now completed his internship and he’ll be available to help me more, but on the flip side, I’ve my campus placements starting from next week so a lot of my time will get into studying and preparing for interviews for different companies. So it’s gonna be a big month ahead for me!!!&lt;/p&gt;

&lt;p&gt;Anyways, I know I’ll manage it somehow, and keep you guys updated. Stay tuned for updates…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">Hello world! I’m back with another post of my GSoC journey. I’m into my final week of Phase 2 and will be filling out the evaluations very soon (excited!). This phase was essentially the core of my GSoC project. Here’s what I’ve done in past two weeks since my last update.</summary></entry><entry><title type="html">GSoC - Mid of phase 2</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Mid-Of-Phase-2/" rel="alternate" type="text/html" title="GSoC - Mid of phase 2" /><published>2017-07-09T21:40:36+05:30</published><updated>2017-07-09T21:40:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC:-Mid-Of-Phase-2</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Mid-Of-Phase-2/">&lt;p&gt;Hello world! I’m back with another post of my GSoC journey. Last week, I received an email from “Google Summer Of Code” and guess what? I passed my first evaluation : tada:.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s13.postimg.org/6zjnxw42v/hello.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My mentors were very happy with my performance so far, and I’m really thankful for their support. Without wasting any time, I started working on the Phase 2 tasks just after submitting the Phase 1 evaluation, so coming back to my work here’s what I’ve done in the past two weeks:&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TLDR;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Proposed a cEP (coala’s Enhancement Proposal) for Information utilization process.&lt;/li&gt;
  &lt;li&gt;Implemented and proposed a PR for &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt; (for those who have not been following up my posts recently, an &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtractor&lt;/code&gt; class mechanism to extract useful information from files)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;diving-into-the-details&quot;&gt;Diving into the details&lt;/h3&gt;

&lt;p&gt;As I mentioned in one of my previous posts that we shifted the integration of CI from phase 2 to phase 1, so the first thing that we decided to do in this phase was to complete the remaining tasks of phase 1, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt;. Unlike other &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtractor&lt;/code&gt; classes implemented so far, the &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt; turned out to be a bit complicated as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There’s no direct implementation of “Gruntfile.js” parser, so I had to make use of parse tree generated from [&lt;code class=&quot;highlighter-rouge&quot;&gt;pyjsparser&lt;/code&gt;], a pypi package for parsing JS files.&lt;/li&gt;
  &lt;li&gt;The “Gruntfile.js” has very rich API, if we were to take into consideration every possible functionality offered by “Gruntfile.js”, it’d have easily taken more than two weeks to complete it. So we tried to follow the 80-20 principle and covered the most common usage for now.
Anyways, the PR is in a good state now, and I’m expecting it to get merged by the coming week after 1-2 review iterations by my mentor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, we decided to dedicate some time to plan the complete bear selection and filtering framework (which, no doubt is the core of my entire GSoC project), so I tried to thoroughly document my approach in the cEP and get it validate by my mentors. This will definitely make the review process much easier both for me and my mentors.&lt;/p&gt;

&lt;p&gt;Both Pull Requests got slightly big (~750 lines), so some decent amount of reviewing work to do by my mentor in the upcoming days.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;This week I’ll be working to actually implement the approach discussed in the proposed cEP with proper tests and documentation and hopefully, by the end of next week, I’ll have a PR ready for the core of my GSoC project which will make us to advance a step closer to making “coala-quickstart” great again! Until then, have fun and enjoy summers!&lt;/p&gt;

&lt;p&gt;PS: This week a lot of coala members will be meeting up at EuroPython 2017, and I really regret not being able to make it due to my campus placements coming up and some financial constraints (I spent a lot in previous Hackathons like MHacks). I still don’t know if I made a good decision or not as this event would have been an amazing learning experience for me as well, but anyways, I hope I’ll get another chance to meet the coala members in real life and a chance to speak in such a big conference very soon :)&lt;/p&gt;

&lt;h3 id=&quot;some-nice-links&quot;&gt;Some nice links&lt;/h3&gt;

&lt;p&gt;The cEP I proposed - https://github.com/coala/cEPs/blob/master/cEP-0014.md&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">Hello world! I’m back with another post of my GSoC journey. Last week, I received an email from “Google Summer Of Code” and guess what? I passed my first evaluation : tada:.</summary></entry><entry><title type="html">Marking the end of Phase 1</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Phase-2-To-The-End-of-New-Beginning/" rel="alternate" type="text/html" title="Marking the end of Phase 1" /><published>2017-06-26T23:40:36+05:30</published><updated>2017-06-26T23:40:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC-Phase-2:-To-The-End-of-New-Beginning</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Phase-2-To-The-End-of-New-Beginning/">&lt;p&gt;So the first phase is finally over, and I managed to complete all my tasks in time :tada:, I’m a 1/3rd GSoCer now. Excited, as always, I filled up my First Evaluation on Google Summer Of Code’s site, and probably my mentors have completed theirs as well (I had to write four long 2k word size answers in the evaluation form :P)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s21.postimg.org/juvvk2k6v/Screenshot_from_2017-06-26_22-51-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks a ton to my mentors &lt;a href=&quot;http://github.com/adtac/&quot;&gt;Adhityaa&lt;/a&gt; and &lt;a href=&quot;https://github.com/Adrianzatreanu&quot;&gt;Adrian&lt;/a&gt; for helping me with my doubts in the weekly meetings, and reviewing and merging all my stuff. The meetings were fun (yeah, some sarcastic jokes when both of them were around :P) as well as informative. It helped all of us align on the same page at the end of every week. This week I had a quite rigorous discussion with Adhityaa regarding future tasks which went on till 2 hrs.&lt;/p&gt;

&lt;p&gt;Also, credits to finish my tasks in time goes to the admins who kept us pushing to complete all our milestones in time.&lt;/p&gt;

&lt;p&gt;After phase 1, this is how my burndown chart looks like&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s17.postimg.org/6a4n7cjzj/Screenshot_from_2017-06-26_22-52-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please checkout https://gitlab.com/coala/GSoC-2017/milestones/20 to see what all tasks I worked upon during the First Phase.&lt;/p&gt;

&lt;p&gt;This time I was more disciplined as compared to the bonding phase (the burndown chart reflects this as well :P)&lt;/p&gt;

&lt;h3 id=&quot;so-whats-next&quot;&gt;So what’s next?&lt;/h3&gt;

&lt;p&gt;We planned to get a cEP (coala’s Enhancement Proposal) proposed by the end of this week and try to make a PR for &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt;, a module that extracts useful information from &lt;code class=&quot;highlighter-rouge&quot;&gt;Gruntfile.js&lt;/code&gt; in projects.&lt;/p&gt;

&lt;p&gt;As everything in this Phase needs to be designed intensively, we are planning to work on multiple tasks every week so that we keep in mind the bigger picture of how everything is going to work together at the end of the day, and reducing our chances of reaching a dead end because of immature design.&lt;/p&gt;

&lt;p&gt;Thanks everyone for reading the post. I’m delighted to finish the first phase of my GSoC journey.&lt;/p&gt;

&lt;p&gt;Stay tuned for more updates…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">So the first phase is finally over, and I managed to complete all my tasks in time :tada:, I’m a 1/3rd GSoCer now. Excited, as always, I filled up my First Evaluation on Google Summer Of Code’s site, and probably my mentors have completed theirs as well (I had to write four long 2k word size answers in the evaluation form :P)</summary></entry><entry><title type="html">GSoC Phase 1 Final Week</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Final-Week-of-Phase-1/" rel="alternate" type="text/html" title="GSoC Phase 1 Final Week" /><published>2017-06-23T00:40:36+05:30</published><updated>2017-06-23T00:40:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC:-Final-Week-of-Phase-1</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Final-Week-of-Phase-1/">&lt;p&gt;Hey everyone! I hope you all are having a fantastic summer. The first phase of my GSoC project is about to end, and I’ll be soon filling up my evaluation. In this post, I’ll summarize my progress (like I’ve been doing in all my previous posts :p). Okay so here it goes.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR;&lt;/h2&gt;
&lt;p&gt;Here’s my progress since my last blog post (almost 2 weeks ago)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reiterated on Appveyor and Travis PRs and got them merged.&lt;/li&gt;
  &lt;li&gt;Went through multiple iterations of my Info Extraction framework’s PR, implemented some new cool features and got the PR merged : tada:&lt;/li&gt;
  &lt;li&gt;Extracted information from the files:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;Phase 2, obviously! :P&lt;/p&gt;

&lt;p&gt;As I pulled the Continuous Integration tasks from Phase 3 of my proposal to Phase 1, I had to push some of the tasks as stretch goals. I and my mentors will be discussing the future tasks to pursue in the upcoming weekly meeting, and we’ll adjust the timeline accordingly (don’t worry I’ll update everyone once we finalize the tasks :P)&lt;/p&gt;

&lt;p&gt;The next Phase will majorly involve utilizing the information that I’ve been able to extract via my Info Extraction framework. It’s gonna be slightly tight as I’ve my campus placements upcoming (damn yes! days of anxiety are near) and I’ll have to prepare for them as well (fingers crossed :))&lt;/p&gt;

&lt;h2 id=&quot;a-deeper-dive-into-my-work&quot;&gt;A deeper dive into my work&lt;/h2&gt;

&lt;p&gt;These two weeks, I underwent multiple iterations of my previous week’s work until they were in perfect shape (Oh yes, getting the code merged is much more exhausting than writing the code).&lt;/p&gt;

&lt;h3 id=&quot;travis-and-appveyor&quot;&gt;Travis and Appveyor&lt;/h3&gt;

&lt;p&gt;Finally, I was able to figure out the mysteries of Travis, CircleCI, and Appveyor. Now we have Travis, Circle CI, and Appveyor integrated into the &lt;code class=&quot;highlighter-rouge&quot;&gt;coala-quickstart&lt;/code&gt; repository. This is a very useful step as I’ll be able to make sure my solution works flawlessly across different Operating Systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s how the tree looks like now&lt;/strong&gt;
&lt;img src=&quot;https://s9.postimg.org/5ui96fyjj/Screenshot_from_2017-06-23_00-55-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I remember when I joined this Open Source world I used to consider these CI checks as “annoying mystery systems”:sweat_smile:, but later I realized their importance and appreciate the services they offer for free to the open source projects.&lt;/p&gt;

&lt;p&gt;It was disappointing the Travis builds for OSX took a crazy long time to start and I eventually ending up removing them from the configuration. I’m planning to try some other CI service for OSX if I finish early with my GSoC tasks.&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href=&quot;http://enwp.org/User:Jayvdb&quot;&gt;John&lt;/a&gt; (@jayvdb) for helping me out with all this.&lt;/p&gt;

&lt;h3 id=&quot;the-information-extraction-framework&quot;&gt;The Information Extraction Framework&lt;/h3&gt;

&lt;p&gt;After making several iterations to my basic version of cEP-0009, we ended up with a pretty robust module with some cool features, one of them being the “type signature” based information value validation. If you are wondering what that means, let me demonstrate with some examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def assert_type_signature(value, type_signature, argname):
    &quot;&quot;&quot;
    Validates the value with the type_signature recursively. The type
    signature is either a single type object, or a collection of type
    objects or allowed values or type signatures.

    &amp;gt;&amp;gt;&amp;gt; assert_type_signature(3, int, &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature(3, (3,), &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature([3,4], ([int],), &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature([3.0 ,4], ([int, float],), &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature([3,4], ([1, 2, 3, 4],), &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature([&quot;foo&quot;, 420], [[str, int]], &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature(&quot;tab&quot;, {&quot;tab&quot;, &quot;space&quot;}, &quot;var&quot;)
    True

    :param value:          Object to be validated against ``type_signature``.
    :param type_signature: Object that describes allowed types and values for
                           the ``value``.
    &quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;^^ I was bit lazy and ended up copy-pasting the inline documentation :P The main idea being it will be able to enforce constraints on the possible values an &lt;code class=&quot;highlighter-rouge&quot;&gt;Info&lt;/code&gt; class can take in my framework. It’s very flexible, and you can give complicated type signatures like&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type_signature = ([str, int, 9.5], &quot;Hello&quot;, &quot;coala!&quot;, [[classA], [int]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hmm, so let’s see what all values match the above type signature:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;9.5&lt;/li&gt;
  &lt;li&gt;[“some string”]&lt;/li&gt;
  &lt;li&gt;[4, 5, “another string”]&lt;/li&gt;
  &lt;li&gt;“Hello”&lt;/li&gt;
  &lt;li&gt;[[4,2,1]]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And what doesn’t match&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“Foo”&lt;/li&gt;
  &lt;li&gt;5.7&lt;/li&gt;
  &lt;li&gt;[2, 2.3]&lt;/li&gt;
  &lt;li&gt;[[“some string”]]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The outer tuple is just a container of multiple possible type signatures and has no role in type matching.&lt;/p&gt;

&lt;p&gt;It was easy, isn’t it?&lt;/p&gt;

&lt;p&gt;Okay, so after some iterations, I was finally able to get the concerned PR merged : tada:&lt;/p&gt;

&lt;h3 id=&quot;implementing-infoextractor-classes&quot;&gt;Implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtractor&lt;/code&gt; classes&lt;/h3&gt;

&lt;p&gt;For the first phase, the files we ended up picking were&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;package.json&lt;/li&gt;
  &lt;li&gt;Gemfile&lt;/li&gt;
  &lt;li&gt;.editorconfig&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the implementation of the Information Extraction Framework, the only tasks that I need to focus on are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Parsing the file.&lt;/li&gt;
  &lt;li&gt;Finding information from the parsed file.
Rest everything (locating files, storing information, validating information, validating filenames, representing information, etc.) is taken care by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Info&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtraction&lt;/code&gt; classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was lucky to find the Gemfile parser on PyPI, but for &lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt; We decided to make and use a custom parser derived from their “editorconfig-core-py” repository. Somehow I was able to make everything work together and make PRs of all three of them in a good-shape.&lt;/p&gt;

&lt;p&gt;That’s all folks! I’m not gonna bore you guys more (brevity is a dying art :P). Stay tuned for more updates…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">Hey everyone! I hope you all are having a fantastic summer. The first phase of my GSoC project is about to end, and I’ll be soon filling up my evaluation. In this post, I’ll summarize my progress (like I’ve been doing in all my previous posts :p). Okay so here it goes.</summary></entry><entry><title type="html">GSoC Update- Mid of Phase 1</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Update-Mid-of-Phase-1/" rel="alternate" type="text/html" title="GSoC Update- Mid of Phase 1" /><published>2017-06-10T05:51:36+05:30</published><updated>2017-06-10T05:51:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC-Update-Mid-of-Phase-1</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Update-Mid-of-Phase-1/">&lt;p&gt;Hey folks, hope everyone is doing great in this summer vaccation season. I saw statistics released from Google lately and was really happy to know that my university had the third highest number of GSoC students selected in the world :). Anyways, in this blog post I’ll summarize my work for these past two weeks.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR;&lt;/h2&gt;
&lt;p&gt;Here’s what I was upto last two weeks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implemented modules for representing information and extracting information.&lt;/li&gt;
  &lt;li&gt;Created upstream issues for some of the things, would be probably working on them on my own if time allows (stretch goals)&lt;/li&gt;
  &lt;li&gt;Added Appveyor continuous integration for windows.&lt;/li&gt;
  &lt;li&gt;Added Travis CI on my project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;In the upcoming weeks, I’ll be working on writing extraction modules for extracting information of interest to coala from common kinds of meta-files. If you’re wondering what these files are, well they are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gruntfile.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gulpfile.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-deeper-dive-into-my-work&quot;&gt;A deeper dive into my work&lt;/h2&gt;

&lt;p&gt;These 2 weeks have been a good learning experience to me. I got to learn more about Object oriented functionalities in python and I explored the world of hosted Continuous Integration and Delivery platforms in-depth.&lt;/p&gt;

&lt;h3 id=&quot;week-1&quot;&gt;Week 1&lt;/h3&gt;

&lt;p&gt;The primary tasks for this week were to create a working prototype for the cEP (coala’s Enhancement Proposal) that I proposed. Having a cEP in advance made it easier for me to take design specific decisions (I’m kinda starting to like “plan well before implement” stuff approach as opposed to the Hackathon-like approaches where I just dived into implementation and the see where it ends up). I wrote extensive tests for both of my modules, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;Info&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtctor&lt;/code&gt;. Another important decision that I had to make was the directory structure and location of these modules (should these go into &lt;code class=&quot;highlighter-rouge&quot;&gt;coalib&lt;/code&gt; or just remain in &lt;code class=&quot;highlighter-rouge&quot;&gt;quickstart&lt;/code&gt;). After discussion with my mentors we agreed upon keeping them in quickstart’s repo only.&lt;/p&gt;

&lt;p&gt;I already made a PR for my Week 1 and I expect to get it merged soon.&lt;/p&gt;

&lt;h3 id=&quot;week-2&quot;&gt;Week 2&lt;/h3&gt;

&lt;p&gt;After weekly meeting of Week 1, we ended up modifying our proposed timeline. As suggested by one of the maintainers (John), we shifted the continuous Integration tasks from Phase 3 to Phase 1 and decided to push everything in the timeline downwards by 1 week. I believe that it was a good decision because it is better to catch and fix platform specific issues earlier during implementation rather than having them reported later (prevention is better than cure!).&lt;/p&gt;

&lt;p&gt;So in the second week, I worked on adding Continuous Integration platforms Appveyor and Travis CI to coala-quickstart similar to other existing coala repositiories. It turned out to more reigorous and complicated than I expected and I ended up making around ~90 attempts to get all of them working at once (that’s probably due to my wrong approach of doing things the hit-and-trial way, I should have understood concepts first and then tried to build things from scratch, but nevermind, that’s how you learn :P). Finally I ended up making them work successfully and I’m very happy about it (earlier I used to shy away from issues related to CI but I don’t think now I’ll ever do that).&lt;/p&gt;

&lt;p&gt;So after the first two weeks, I was able to set up a basic structure and CI system for my upcoming Tasks.&lt;/p&gt;

&lt;p&gt;That’s all folks! Stay tuned for more updates…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">Hey folks, hope everyone is doing great in this summer vaccation season. I saw statistics released from Google lately and was really happy to know that my university had the third highest number of GSoC students selected in the world :). Anyways, in this blog post I’ll summarize my work for these past two weeks.</summary></entry><entry><title type="html">Two weeks into Community Bonding</title><link href="http://localhost:4000/blog/posts/personal/gsoc/two-weeks-into-community-bonding/" rel="alternate" type="text/html" title="Two weeks into Community Bonding" /><published>2017-05-20T05:51:36+05:30</published><updated>2017-05-20T05:51:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/two-weeks-into-community-bonding</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/two-weeks-into-community-bonding/">&lt;p&gt;So it’s been more than two weeks into the Community bonding period, my examinations are about to get over (finally:sweat_smile:) and I’ve planned out my milestones with my mentors. Looks like I’ll be all set to code after 1 week.&lt;/p&gt;

&lt;p&gt;Here’s what I was upto past two weeks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I introduced myself and my project on the mailing lists.&lt;/li&gt;
  &lt;li&gt;Disucssed my projects with my mentors and made adjustments to my timline.&lt;/li&gt;
  &lt;li&gt;Did some research on the meta-files and the information to work on during my first phase of the project.&lt;/li&gt;
  &lt;li&gt;Created milestones and issues on Gitlab to keep track of my progress over the entire GSoC period.&lt;/li&gt;
  &lt;li&gt;Proposed a cEP (coala Enhancement Proposal) regarding approach in Phase 1 of my project.&lt;/li&gt;
  &lt;li&gt;Managed to get past my theory exams somehow :P , still left with Minor Project and Winter-training viva.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Some nice links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My post in mailing list - &lt;a href=&quot;https://groups.google.com/forum/#!topic/coala-devel/0A_Wz3pyWgk&quot;&gt;https://groups.google.com/forum/#!topic/coala-devel/0A_Wz3pyWgk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The cEP I proposed - &lt;a href=&quot;https://github.com/satwikkansal/cEPs/blob/f5f7ac61d263de759be47414fe6a210fae1c84c0/cEP-0009.md&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Description of my project - &lt;a href=&quot;http://projects.coala.io/#/projects?project=enhance_coala-quickstart&quot;&gt;http://projects.coala.io/#/projects?project=enhance_coala-quickstart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;My project milestones -
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/6&quot;&gt;BONDING&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/20&quot;&gt;PHASE 1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/21&quot;&gt;PHASE 2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/22&quot;&gt;PHASE 3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/41&quot;&gt;STRETCH GOALS&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">So it’s been more than two weeks into the Community bonding period, my examinations are about to get over (finally:sweat_smile:) and I’ve planned out my milestones with my mentors. Looks like I’ll be all set to code after 1 week.</summary></entry><entry><title type="html">My GSoC story begins</title><link href="http://localhost:4000/blog/posts/personal/gsoc/my-gsoc-story-begins/" rel="alternate" type="text/html" title="My GSoC story begins" /><published>2017-05-02T06:51:36+05:30</published><updated>2017-05-02T06:51:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/my-gsoc-story-begins</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/my-gsoc-story-begins/">&lt;p&gt;&lt;img src=&quot;https://image.ibb.co/gqKL1Q/gsoc2.png&quot; alt=&quot;GSoC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:tada: That was the most exciting moment in past few months as I finally acheived my 2-year awaited GSoC dream. I started contributing to &lt;strong&gt;coala&lt;/strong&gt; since the very first day of 2017 (Not a new year resolution though :P) and no doubt, the journey so far had been awesome and offered me a lot of opportunities to learn and grow as a developer. The last few months have indeed been bit hectic but the outcomes have been worth every effort.&lt;/p&gt;

&lt;h2 id=&quot;about-my-project&quot;&gt;About my project&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://preview.ibb.co/fpNwak/gsoc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can read the abstract &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#4853947354316800&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-road-ahead&quot;&gt;The road ahead&lt;/h2&gt;

&lt;p&gt;This month is officialy a “community-bonding-period”. As I’m already familiar with the community as well as the codebase of &lt;code class=&quot;highlighter-rouge&quot;&gt;coala-quickstart&lt;/code&gt;, I plan to do extensive research about implementation of my project in this period so that I don’t face much difficulties during the upcoming “coding-phases”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; There’s gonna be &lt;strong&gt;lot&lt;/strong&gt; of upcoming blog-posts regarding my GSoC journey and the new things that I learn on my way. Stay tuned…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html"></summary></entry><entry><title type="html">A fresh start with my little web-space</title><link href="http://localhost:4000/blog/posts/personal/a-fresh-start/" rel="alternate" type="text/html" title="A fresh start with my little web-space" /><published>2017-05-02T06:51:36+05:30</published><updated>2017-05-02T06:51:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/a-fresh-start</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/a-fresh-start/">&lt;p&gt;After mashing up 3-4 jekyll themes and doing few modifications over the past month, I ended up with the new design of my &lt;a href=&quot;http://www.satwikkansal.xyz&quot;&gt;website&lt;/a&gt; ,shifted my blog from &lt;a href=&quot;https://www.satwikkansal.wordpress.com&quot;&gt;wordpress&lt;/a&gt; to &lt;a href=&quot;http://satwikkansal.xyz/blog&quot;&gt;jekyll&lt;/a&gt;, and created a &lt;a href=&quot;http://satwikkansal.xyz/projects&quot;&gt;portfolio&lt;/a&gt; to share my projects. All of this was a long overdue (and still a lot of stuff to implement) but I think the basic structure is ready right now.&lt;/p&gt;

&lt;p&gt;The reason I called this post a “Fresh Beginning” is &lt;!--more--&gt; there are lots of things that I’m planning to do (&lt;strong&gt;strictly&lt;/strong&gt; :sweat_smile:) from next month onwards. Few of them are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Blog often&lt;/strong&gt; : I don’t have any followers though, but blogging actually is a good practice to understand things in detail and present them in the simplest way possible. Also, it would help me to track my progress so far as a developer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Try different platforms&lt;/strong&gt;: Would like to spend more time on Twitter, Medium, Reddit and Quora and stay as away as I could from Facebook. Facebook is all messed up these days, even the messenger app is bloated with all kinds of messaging-app features that exist on earth.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Work on serious projects&lt;/strong&gt;: I’ve few good ideas to implement which I’d like to focus on and pursue till the completion (making something that is usable by others). Would also try to find some new “collaborator-friends” who have similar skillset as mine to work on large but cool projects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Try and explore more technologies:&lt;/strong&gt; Augmented Reality and few Machine Learning fields (Genrative Adversarial Networks, Reinforcement Learning) are on my list. Let’s see if I’m able to come up with some interesting applications of these technologies.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="website" /><category term="goals" /><summary type="html">After mashing up 3-4 jekyll themes and doing few modifications over the past month, I ended up with the new design of my website ,shifted my blog from wordpress to jekyll, and created a portfolio to share my projects. All of this was a long overdue (and still a lot of stuff to implement) but I think the basic structure is ready right now. The reason I called this post a “Fresh Beginning” is</summary></entry><entry><title type="html">Python practices for efficient and optimized code</title><link href="http://localhost:4000/blog/posts/python/python-programming-practices-for-efficient-and-optimized-code/" rel="alternate" type="text/html" title="Python practices for efficient and optimized code" /><published>2016-12-27T06:51:36+05:30</published><updated>2016-12-27T06:51:36+05:30</updated><id>http://localhost:4000/blog/posts/python/python-programming-practices-for-efficient-and-optimized-code</id><content type="html" xml:base="http://localhost:4000/blog/posts/python/python-programming-practices-for-efficient-and-optimized-code/">&lt;p&gt;In this blog post,  I will try to cover common techniques to write more efficient and optimized code in Python. By efficient and optimized I mean - &lt;!--more--&gt; A code that requires minimum memory, executes faster, looks clean, is properly documented and makes it easy for other developers to collaborate. This might help you while contributing to an Open Source organization, submitting a solution to an Online Judge, working on large data processing problems like Machine Learning or while making your own project.&lt;/p&gt;

&lt;p&gt;So let’s get started!&lt;/p&gt;

&lt;h2&gt;Don’t blow off the memory&lt;/h2&gt;

&lt;p&gt;Unlike C/C++, Python’s memory management is performed by the interpreter and the
&lt;!--more Keep on reading!--&gt;
users have no control over it. Memory management in Python involves a private heap containing all Python objects and data structures. The management of this private heap is ensured internally by the &lt;em&gt;Python memory manager&lt;/em&gt;. So you just create an object and the Python Virtual Machine handles the memory needed and where it shall be placed in the memory layout. However, a deep insight of how the things work and different ways to do them can help you minimize memory usage of your program.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Use generators for calculating large sets of results. Generators give you lazy evaluation. You use them by iterating over them, either explicitly with 'for' or implicitly by passing it to any function or construct that iterates. You can think of generators as returning multiple items, as if they return a list, but instead of returning them all at once they return them one-by-one, and the generator function is paused until the next item is requested. Read more about Python Generators from &lt;a href=&quot;https://jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;For large number/data crunching, you can use libraries like &lt;a href=&quot;http://www.numpy.org/&quot;&gt;Numpy&lt;/a&gt; which handle memory management gracefully.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Track your memory usage at object level by using inbuilt modules like &lt;a href=&quot;https://docs.python.org/2/library/resource.html&quot;&gt;resource &lt;/a&gt;and &lt;a href=&quot;https://mg.pov.lt/objgraph/&quot; target=&quot;_blank&quot;&gt;objgraph&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Managing memory leaks in Python can be a tough job but luckily there are tools like &lt;a href=&quot;https://pypi.python.org/pypi/guppy/&quot; target=&quot;_blank&quot;&gt;heapy&lt;/a&gt; for debugging memory leaks. &lt;em&gt;heapy&lt;/em&gt; can be used along with &lt;em&gt;objgraph&lt;/em&gt; to watch allocation growth of diff objects over time. &lt;em&gt;heapy&lt;/em&gt; can show which objects are holding the most memory etc.&lt;em&gt; objgraph&lt;/em&gt; can help in finding the backreferences to understand exactly why they cannot be freed. You can read more about diagnosing memory leaks in Python from &lt;a href=&quot;http://chase-seibert.github.io/blog/2013/08/03/diagnosing-memory-leaks-python.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Use format instead of ‘+’ for generating strings -  In Python,  &lt;code&gt;str&lt;/code&gt; is immutable, so the left and right string have to be copied into the new string for every pair of concatenation. If you concatenate four strings of length 10, you will be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters, instead of just 40 characters. And things gets quadratically worse as the number and size of the string increases. Java optimizes this case some of the times by transforming the series of concatenation to use &lt;code&gt;StringBuilder&lt;/code&gt;, but CPython doesn't. So it is advised to use .format or % syntax. If you can't decide which one to choose among .format and %, check &lt;a href=&quot;http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format&quot;&gt;this&lt;/a&gt; interesting Stackoverflow thread.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Use &lt;em&gt;__slots__&lt;/em&gt; when defining a Python class. You can tell Python not to use a dynamic &lt;em&gt;dict&lt;/em&gt;, and only allocate space for a fixed set of attributes eliminating the overhead of one dict for every object by settings &lt;code&gt;__slots__&lt;/code&gt; on the class to a fixed list of attribute names. Read more about &lt;em&gt;slots&lt;/em&gt; from &lt;a href=&quot;http://stackoverflow.com/questions/472000/usage-of-slots&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read a bit in detail about memory management in Python by the developers of Theano from &lt;a href=&quot;http://deeplearning.net/software/theano/tutorial/python-memory-management.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Python 2 or Python 3? Both!&lt;/h2&gt;

&lt;p&gt;When starting a new Python project or even starting with Python altogether you may have found yourself in the dilemma of choosing Python 2 or Python 3. This is a widely discussed topic with many opinions and good explanations on the internet. However, it is actually possible to write code in a way that works on both Python 2 and Python 3 interpreters. The most common way to achieve this use packages like &lt;em&gt;future, builtins&lt;/em&gt;, and six to maintain a single, clean Python 3.x-compatible codebase and support both Python 2 and Python 3 with minimal overhead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;span class=&quot;pre&quot;&gt;python-future&lt;/span&gt;&lt;/code&gt; is the missing compatibility layer between Python 2 and Python 3.It provides &lt;code&gt;&lt;span class=&quot;pre&quot;&gt;future&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;pre&quot;&gt;past&lt;/span&gt;&lt;/code&gt; packages with backports and forward ports of features from Python 3 and 2. It also comes with &lt;code&gt;&lt;span class=&quot;pre&quot;&gt;futurize&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;pre&quot;&gt;pasteurize&lt;/span&gt;&lt;/code&gt;, customized 2to3-based scripts that help you to convert either Py2 or Py3 code easily to support both Python 2 and 3 in a single clean Py3-style codebase, module by module.&lt;/p&gt;

&lt;p&gt;Please do check the awesome &lt;strong&gt;Cheat Sheet&lt;/strong&gt; for writing Python 2-3 compatible code by Ed Schofield. And if you’re more into watching videos than reading then you may find his talk at PyCon AU 2014, “&lt;a href=&quot;http://www.youtube.com/watch?v=KOqk8j11aAI&amp;amp;t=10m14s&quot;&gt;Writing 2/3 compatible code&lt;/a&gt;” helpful.&lt;/p&gt;

&lt;h2&gt;The first impression is the last impression&lt;/h2&gt;

&lt;p&gt;Sharing code is a rewarding endeavor.  Whatever the motivation, your good intentions may not have the desired outcome if people find your code hard to use or understand. Almost every organization follows style guidelines that developers have to follow for consistency, easy debugging, and ease of collaboration. The &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot;&gt;Zen of Python&lt;/a&gt; is like a mini style and design guide for Python. Following are some of the popular style guidelines for Python:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8 style guide&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.memonic.com/user/pneff/folder/python/id/1bufp&quot;&gt;Python Idioms and efficiency&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://google.github.io/styleguide/pyguide.html&quot;&gt;Google Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These guidelines discuss how to use whitespace, using commas and braces, how to, object naming guidelines, etc.Though they may be conflicting each other at some situation but all of them really have the same objective - Clean, Readable, and Debuggable standard for code. So just stick to one, or follow your own guide but don’t try to follow something drastically different from widely accepted standards.&lt;/p&gt;

&lt;h3&gt;Using pylint&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.logilab.org/857&quot;&gt;Pylint&lt;/a&gt; is a Python tool that checks a module for coding standards. &lt;em&gt;Pylint&lt;/em&gt; can be a quick and easy way of seeing if your code has captured the essence of PEP-8 and is therefore ‘friendly’ to other potential users. It also provides you reports with insightful metrics and statistics that may help you judge the quality of code. You can also customize it by creating your own &lt;em&gt;.pylintrc&lt;/em&gt; file and using it.&lt;/p&gt;

&lt;p&gt;Pylint is not the only choice, there are other tools like &lt;em&gt;PyChecker, PyFlakes,&lt;/em&gt; and packages like &lt;em&gt;pep8 and flakes8&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Reports and analysis&lt;/h2&gt;

&lt;p&gt;It is often helpful to analyze your code for coverage, quality, and performance. For evaluating performance, Python comes with the &lt;a href=&quot;https://docs.python.org/2/library/profile.html#module-cProfile&quot; target=&quot;_blank&quot;&gt;cProfile&lt;/a&gt; module. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations. Here’s how a sample analysis by &lt;em&gt;cProfile&lt;/em&gt; look like&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-574&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/screenshot-from-2016-12-26-17-34-10.png&quot; alt=&quot;screenshot-from-2016-12-26-17-34-10&quot; width=&quot;719&quot; height=&quot;233&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fabianp/memory_profiler&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;memory_profiler&lt;/strong&gt;&lt;/a&gt; :  It’s a python module for monitoring memory consumption of a process as well as line-by-line analysis of memory consumption for python programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;a href=&quot;http://mg.pov.lt/objgraph/&quot;&gt;objgraph&lt;/a&gt;&lt;/strong&gt; : It allows you to show the top N objects occupying our python program’s memory, show what objects have been deleted or added over a period of time and show all references to a given object in your script.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/resource.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;resource&lt;/strong&gt;&lt;/a&gt; : This module provides basic mechanisms for measuring and controlling system resources utilized by a program. Two prime uses include limiting the allocation of resource and getting information about the current usage of the resource.&lt;/p&gt;

&lt;h2&gt;Multiprocess, not Multi-thread&lt;/h2&gt;

&lt;p&gt;When it comes to improving the execution time of your multiple-task code, you may want to utilize multiple cores in the CPU to execute several tasks simultaneously. Intuitively, it may come to your mind to spawn several threads and let them execute concurrently, but due to Global Interpreter Lock in Python, all you’re doing is making your threads execute on the same core turn by turn.&lt;/p&gt;

&lt;p&gt;To achieve actual parallelization in Python, you might have a use &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html&quot;&gt;multiprocessing &lt;/a&gt;module of Python. Another solution might be outsourcing the tasks to:-&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;The operating system (by doing multi-processing)&lt;/li&gt;
    &lt;li&gt;Some external application that calls your Python code (eg, Spark or Hadoop)&lt;/li&gt;
    &lt;li&gt;Some code that your Python code calls (eg: you could have your Python code call a C function that does the expensive multi-threaded stuff).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Test often&lt;/h2&gt;

&lt;p&gt;It is a good practice to write unit and if you think that writing tests is not worth the effort take a look at &lt;a href=&quot;http://stackoverflow.com/questions/67299/is-unit-testing-worth-the-effort&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; Stackoverflow thread. Test-driven development is about &lt;em&gt;development&lt;/em&gt; (and design), specifically improving the quality and design of code.Also, it’s better to write your tests before or during coding. Python provides &lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot; target=&quot;_blank&quot;&gt;unittest&lt;/a&gt; module to write unit tests for your functions and classes. There are alternatives like:&lt;/p&gt;

&lt;p style=&quot;padding-left:30px;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://pythontesting.net/framework/nose/nose-introduction/&quot;&gt;nose&lt;/a&gt;&lt;/strong&gt; - can run &lt;em&gt;unittest&lt;/em&gt; tests, and has less boilerplate.
&lt;strong&gt;&lt;a href=&quot;http://pythontesting.net/framework/pytest/pytest-introduction/&quot;&gt;pytest&lt;/a&gt;&lt;/strong&gt; - also runs &lt;em&gt;unittest&lt;/em&gt; tests, has less boilerplate, better reporting, lots of cool extra features.&lt;/p&gt;

&lt;p style=&quot;padding-left:30px;&quot;&gt;To get a good comparison of all of these, read through the introductions to each &lt;a href=&quot;http://pythontesting.net/start-here&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coverage.readthedocs.io/en/coverage-4.2/&quot; target=&quot;_blank&quot;&gt;coverage&lt;/a&gt; is a tool for measuring code coverage of Python programs. It monitors your program, noting which parts of the code have been executed, then analyzes the source to identify code that could have been executed but was not. Coverage measurement is typically used to gauge the effectiveness of tests. It can show which parts of your code are being exercised by tests, and which are not.&lt;/p&gt;

&lt;p&gt;That’s how much I know for now, and I’ll try to add more topics and stuff to this post as I discover them in my journey as a Python developer. Thanks for reading!&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="python" /><category term="optimization" /><category term="efficency" /><summary type="html">In this blog post,  I will try to cover common techniques to write more efficient and optimized code in Python. By efficient and optimized I mean -</summary></entry><entry><title type="html">7 things I learnt from coala</title><link href="http://localhost:4000/blog/posts/oss/7-things-i-learned-from-coala/" rel="alternate" type="text/html" title="7 things I learnt from coala" /><published>2016-12-27T06:51:36+05:30</published><updated>2016-12-27T06:51:36+05:30</updated><id>http://localhost:4000/blog/posts/oss/7-things-i-learned-from-coala</id><content type="html" xml:base="http://localhost:4000/blog/posts/oss/7-things-i-learned-from-coala/">&lt;p&gt;So this New Year, I started seriously contributing to Open Source. After going through tons of organizations I shortlisted a few of 3-5 based on my interests, skills, and several other factors (I like some maths and analysis!). But I soon discovered keeping up with several organizations is more pain and less gain for me. So now I’m down to only 1 organization that I’d put my best efforts into. coala is a user-friendly language independent code analysis tool built mostly using Python. It’s been exactly 2 weeks contributing to coala. Following are some of the things that I found interesting about coala:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;coala starts with a lower case ‘c’ and not ‘C’.&lt;/li&gt;
  &lt;li&gt;coala is vast! There are many coala projects on Gitlab as well. There are around 10 gitter rooms, and tons of other communication channels for coala apart from Gitter. Check &lt;a href=&quot;https://github.com/coala/coala/wiki/Communication-Channels&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;People here are fun. Well at least much more fun than other organizations I’ve tried to contribute and failed (I guess that’s the reason I decided to just stick this time)&lt;/li&gt;
  &lt;li&gt;Try using coala in your projects as well. It’s fun and made me realize how badly I disregarded &lt;code class=&quot;highlighter-rouge&quot;&gt;PEP8&lt;/code&gt; earlier :P Contributing to Coala is helping me be more disciplined as a programmer like writing cleaner code, good commit practices and much more.&lt;/li&gt;
  &lt;li&gt;Don’t tag &lt;strong&gt;@sils&lt;/strong&gt; unnecessarily in gitter. Yeah, this topic often comes up in the channel. He’s a nice guy but he has other works as well. Other maintainers like &lt;strong&gt;@jayvdb&lt;/strong&gt;, &lt;strong&gt;@udayan&lt;/strong&gt;, &lt;strong&gt;@makman2&lt;/strong&gt;, &lt;strong&gt;@fneu&lt;/strong&gt;, &lt;strong&gt;@adrianzatreanu&lt;/strong&gt;, &lt;strong&gt;@mixih&lt;/strong&gt;, &lt;strong&gt;@adtac&lt;/strong&gt; and many quality developers there to help out if one get’s stuck.&lt;/li&gt;
  &lt;li&gt;Review other people’s code, or at least try to see how they approached solving the issue. Code reviewing is as important as creating a Pull Request. I’m now trying to improve my capabilities to find functionality related bugs in the code.&lt;/li&gt;
  &lt;li&gt;Don’t ask for help on the channel before trying to help yourself. coalians are not dependent on someone else, they solve their problems on their own. I mean we should do some research on our end before posting a question/error. I realized that a simple mistake on my end could waste a lot of valuable time of someone else.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And if you didn’t noticed that I spelled coala with an Uppercase ‘C’ in the 4th point, it’s okay! Next time you’ll never miss this. Have fun :)&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="python" /><category term="oss" /><category term="coala" /><summary type="html">So this New Year, I started seriously contributing to Open Source. After going through tons of organizations I shortlisted a few of 3-5 based on my interests, skills, and several other factors (I like some maths and analysis!). But I soon discovered keeping up with several organizations is more pain and less gain for me. So now I’m down to only 1 organization that I’d put my best efforts into. coala is a user-friendly language independent code analysis tool built mostly using Python. It’s been exactly 2 weeks contributing to coala. Following are some of the things that I found interesting about coala: coala starts with a lower case ‘c’ and not ‘C’. coala is vast! There are many coala projects on Gitlab as well. There are around 10 gitter rooms, and tons of other communication channels for coala apart from Gitter. Check this People here are fun. Well at least much more fun than other organizations I’ve tried to contribute and failed (I guess that’s the reason I decided to just stick this time) Try using coala in your projects as well. It’s fun and made me realize how badly I disregarded PEP8 earlier :P Contributing to Coala is helping me be more disciplined as a programmer like writing cleaner code, good commit practices and much more. Don’t tag @sils unnecessarily in gitter. Yeah, this topic often comes up in the channel. He’s a nice guy but he has other works as well. Other maintainers like @jayvdb, @udayan, @makman2, @fneu, @adrianzatreanu, @mixih, @adtac and many quality developers there to help out if one get’s stuck. Review other people’s code, or at least try to see how they approached solving the issue. Code reviewing is as important as creating a Pull Request. I’m now trying to improve my capabilities to find functionality related bugs in the code. Don’t ask for help on the channel before trying to help yourself. coalians are not dependent on someone else, they solve their problems on their own. I mean we should do some research on our end before posting a question/error. I realized that a simple mistake on my end could waste a lot of valuable time of someone else. And if you didn’t noticed that I spelled coala with an Uppercase ‘C’ in the 4th point, it’s okay! Next time you’ll never miss this. Have fun :)</summary></entry></feed>