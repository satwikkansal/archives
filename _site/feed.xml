<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2017-07-09T22:47:41+05:30</updated><id>http://localhost:4000/blog/</id><title type="html">Satwik Kansal’s blog</title><subtitle>Freelance Software Developer and Open Source enthusiast experienced in Data Science and Web Development.
</subtitle><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><entry><title type="html">GSoC - Mid of phase 2</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Mid-Of-Phase-2/" rel="alternate" type="text/html" title="GSoC - Mid of phase 2" /><published>2017-07-09T21:40:36+05:30</published><updated>2017-07-09T21:40:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC:-Mid-Of-Phase-2</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Mid-Of-Phase-2/">&lt;p&gt;Hello world! I’m back with another post of my GSoC journey. Last week, I received an email from “Google Summer Of Code” and guess what? I passed my first evaluation : tada:.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s13.postimg.org/6zjnxw42v/hello.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My mentors were very happy with my performance so far, and I’m really thankful for their support. Without wasting any time, I started working on the Phase 2 tasks just after submitting the Phase 1 evaluation, so coming back to my work here’s what I’ve done in the past two weeks:&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TLDR;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Proposed a cEP (coala’s Enhancement Proposal) for Information utilization process.&lt;/li&gt;
  &lt;li&gt;Implemented and proposed a PR for &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt; (for those who have not been following up my posts recently, an &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtractor&lt;/code&gt; class mechanism to extract useful information from files)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;diving-into-the-details&quot;&gt;Diving into the details&lt;/h3&gt;

&lt;p&gt;As I mentioned in one of my previous posts that we shifted the integration of CI from phase 2 to phase 1, so the first thing that we decided to do in this phase was to complete the remaining tasks of phase 1, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt;. Unlike other &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtractor&lt;/code&gt; classes implemented so far, the &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt; turned out to be a bit complicated as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;There’s no direct implementation of “Gruntfile.js” parser, so I had to make use of parse tree generated from [&lt;code class=&quot;highlighter-rouge&quot;&gt;pyjsparser&lt;/code&gt;], a pypi package for parsing JS files.&lt;/li&gt;
  &lt;li&gt;The “Gruntfile.js” has very rich API, if we were to take into consideration every possible functionality offered by “Gruntfile.js”, it’d have easily taken more than two weeks to complete it. So we tried to follow the 80-20 principle and covered the most common usage for now.
Anyways, the PR is in a good state now, and I’m expecting it to get merged by the coming week after 1-2 review iterations by my mentor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, we decided to dedicate some time to plan the complete bear selection and filtering framework (which, no doubt is the core of my entire GSoC project), so I tried to thoroughly document my approach in the cEP and get it validate by my mentors. This will definitely make the review process much easier both for me and my mentors.&lt;/p&gt;

&lt;p&gt;Both Pull Requests got slightly big (~750 lines), so some decent amount of reviewing work to do by my mentor in the upcoming days.&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;This week I’ll be working to actually implement the approach discussed in the proposed cEP with proper tests and documentation and hopefully, by the end of next week, I’ll have a PR ready for the core of my GSoC project which will make us to advance a step closer to making “coala-quickstart” great again! Until then, have fun and enjoy summers!&lt;/p&gt;

&lt;p&gt;PS: This week a lot of coala members will be meeting up at EuroPython 2017, and I really regret not being able to make it due to my campus placements coming up and some financial constraints (I spent a lot in previous Hackathons like MHacks). I still don’t know if I made a good decision or not as this event would have been an amazing learning experience for me as well, but anyways, I hope I’ll get another chance to meet the coala members in real life and a chance to speak in such a big conference very soon :)&lt;/p&gt;

&lt;h3 id=&quot;some-nice-links&quot;&gt;Some nice links&lt;/h3&gt;

&lt;p&gt;The cEP I proposed - https://github.com/coala/cEPs/blob/master/cEP-0014.md&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">Hello world! I’m back with another post of my GSoC journey. Last week, I received an email from “Google Summer Of Code” and guess what? I passed my first evaluation : tada:.</summary></entry><entry><title type="html">Marking the end of Phase 1</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Phase-2-To-The-End-of-New-Beginning/" rel="alternate" type="text/html" title="Marking the end of Phase 1" /><published>2017-06-26T23:40:36+05:30</published><updated>2017-06-26T23:40:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC-Phase-2:-To-The-End-of-New-Beginning</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Phase-2-To-The-End-of-New-Beginning/">&lt;p&gt;So the first phase is finally over, and I managed to complete all my tasks in time :tada:, I’m a 1/3rd GSoCer now. Excited, as always, I filled up my First Evaluation on Google Summer Of Code’s site, and probably my mentors have completed theirs as well (I had to write four long 2k word size answers in the evaluation form :P)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s21.postimg.org/juvvk2k6v/Screenshot_from_2017-06-26_22-51-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks a ton to my mentors &lt;a href=&quot;http://github.com/adtac/&quot;&gt;Adhityaa&lt;/a&gt; and &lt;a href=&quot;https://github.com/Adrianzatreanu&quot;&gt;Adrian&lt;/a&gt; for helping me with my doubts in the weekly meetings, and reviewing and merging all my stuff. The meetings were fun (yeah, some sarcastic jokes when both of them were around :P) as well as informative. It helped all of us align on the same page at the end of every week. This week I had a quite rigorous discussion with Adhityaa regarding future tasks which went on till 2 hrs.&lt;/p&gt;

&lt;p&gt;Also, credits to finish my tasks in time goes to the admins who kept us pushing to complete all our milestones in time.&lt;/p&gt;

&lt;p&gt;After phase 1, this is how my burndown chart looks like&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s17.postimg.org/6a4n7cjzj/Screenshot_from_2017-06-26_22-52-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please checkout https://gitlab.com/coala/GSoC-2017/milestones/20 to see what all tasks I worked upon during the First Phase.&lt;/p&gt;

&lt;p&gt;This time I was more disciplined as compared to the bonding phase (the burndown chart reflects this as well :P)&lt;/p&gt;

&lt;h3 id=&quot;so-whats-next&quot;&gt;So what’s next?&lt;/h3&gt;

&lt;p&gt;We planned to get a cEP (coala’s Enhancement Proposal) proposed by the end of this week and try to make a PR for &lt;code class=&quot;highlighter-rouge&quot;&gt;GruntfileInfoExtractor&lt;/code&gt;, a module that extracts useful information from &lt;code class=&quot;highlighter-rouge&quot;&gt;Gruntfile.js&lt;/code&gt; in projects.&lt;/p&gt;

&lt;p&gt;As everything in this Phase needs to be designed intensively, we are planning to work on multiple tasks every week so that we keep in mind the bigger picture of how everything is going to work together at the end of the day, and reducing our chances of reaching a dead end because of immature design.&lt;/p&gt;

&lt;p&gt;Thanks everyone for reading the post. I’m delighted to finish the first phase of my GSoC journey.&lt;/p&gt;

&lt;p&gt;Stay tuned for more updates…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">So the first phase is finally over, and I managed to complete all my tasks in time :tada:, I’m a 1/3rd GSoCer now. Excited, as always, I filled up my First Evaluation on Google Summer Of Code’s site, and probably my mentors have completed theirs as well (I had to write four long 2k word size answers in the evaluation form :P)</summary></entry><entry><title type="html">GSoC Phase 1 Final Week</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Final-Week-of-Phase-1/" rel="alternate" type="text/html" title="GSoC Phase 1 Final Week" /><published>2017-06-23T00:40:36+05:30</published><updated>2017-06-23T00:40:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC:-Final-Week-of-Phase-1</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Final-Week-of-Phase-1/">&lt;p&gt;Hey everyone! I hope you all are having a fantastic summer. The first phase of my GSoC project is about to end, and I’ll be soon filling up my evaluation. In this post, I’ll summarize my progress (like I’ve been doing in all my previous posts :p). Okay so here it goes.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR;&lt;/h2&gt;
&lt;p&gt;Here’s my progress since my last blog post (almost 2 weeks ago)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reiterated on Appveyor and Travis PRs and got them merged.&lt;/li&gt;
  &lt;li&gt;Went through multiple iterations of my Info Extraction framework’s PR, implemented some new cool features and got the PR merged : tada:&lt;/li&gt;
  &lt;li&gt;Extracted information from the files:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;Phase 2, obviously! :P&lt;/p&gt;

&lt;p&gt;As I pulled the Continuous Integration tasks from Phase 3 of my proposal to Phase 1, I had to push some of the tasks as stretch goals. I and my mentors will be discussing the future tasks to pursue in the upcoming weekly meeting, and we’ll adjust the timeline accordingly (don’t worry I’ll update everyone once we finalize the tasks :P)&lt;/p&gt;

&lt;p&gt;The next Phase will majorly involve utilizing the information that I’ve been able to extract via my Info Extraction framework. It’s gonna be slightly tight as I’ve my campus placements upcoming (damn yes! days of anxiety are near) and I’ll have to prepare for them as well (fingers crossed :))&lt;/p&gt;

&lt;h2 id=&quot;a-deeper-dive-into-my-work&quot;&gt;A deeper dive into my work&lt;/h2&gt;

&lt;p&gt;These two weeks, I underwent multiple iterations of my previous week’s work until they were in perfect shape (Oh yes, getting the code merged is much more exhausting than writing the code).&lt;/p&gt;

&lt;h3 id=&quot;travis-and-appveyor&quot;&gt;Travis and Appveyor&lt;/h3&gt;

&lt;p&gt;Finally, I was able to figure out the mysteries of Travis, CircleCI, and Appveyor. Now we have Travis, Circle CI, and Appveyor integrated into the &lt;code class=&quot;highlighter-rouge&quot;&gt;coala-quickstart&lt;/code&gt; repository. This is a very useful step as I’ll be able to make sure my solution works flawlessly across different Operating Systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s how the tree looks like now&lt;/strong&gt;
&lt;img src=&quot;https://s9.postimg.org/5ui96fyjj/Screenshot_from_2017-06-23_00-55-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I remember when I joined this Open Source world I used to consider these CI checks as “annoying mystery systems”:sweat_smile:, but later I realized their importance and appreciate the services they offer for free to the open source projects.&lt;/p&gt;

&lt;p&gt;It was disappointing the Travis builds for OSX took a crazy long time to start and I eventually ending up removing them from the configuration. I’m planning to try some other CI service for OSX if I finish early with my GSoC tasks.&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href=&quot;http://enwp.org/User:Jayvdb&quot;&gt;John&lt;/a&gt; (@jayvdb) for helping me out with all this.&lt;/p&gt;

&lt;h3 id=&quot;the-information-extraction-framework&quot;&gt;The Information Extraction Framework&lt;/h3&gt;

&lt;p&gt;After making several iterations to my basic version of cEP-0009, we ended up with a pretty robust module with some cool features, one of them being the “type signature” based information value validation. If you are wondering what that means, let me demonstrate with some examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def assert_type_signature(value, type_signature, argname):
    &quot;&quot;&quot;
    Validates the value with the type_signature recursively. The type
    signature is either a single type object, or a collection of type
    objects or allowed values or type signatures.

    &amp;gt;&amp;gt;&amp;gt; assert_type_signature(3, int, &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature(3, (3,), &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature([3,4], ([int],), &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature([3.0 ,4], ([int, float],), &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature([3,4], ([1, 2, 3, 4],), &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature([&quot;foo&quot;, 420], [[str, int]], &quot;var&quot;)
    True
    &amp;gt;&amp;gt;&amp;gt; assert_type_signature(&quot;tab&quot;, {&quot;tab&quot;, &quot;space&quot;}, &quot;var&quot;)
    True

    :param value:          Object to be validated against ``type_signature``.
    :param type_signature: Object that describes allowed types and values for
                           the ``value``.
    &quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;^^ I was bit lazy and ended up copy-pasting the inline documentation :P The main idea being it will be able to enforce constraints on the possible values an &lt;code class=&quot;highlighter-rouge&quot;&gt;Info&lt;/code&gt; class can take in my framework. It’s very flexible, and you can give complicated type signatures like&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type_signature = ([str, int, 9.5], &quot;Hello&quot;, &quot;coala!&quot;, [[classA], [int]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Hmm, so let’s see what all values match the above type signature:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;9.5&lt;/li&gt;
  &lt;li&gt;[“some string”]&lt;/li&gt;
  &lt;li&gt;[4, 5, “another string”]&lt;/li&gt;
  &lt;li&gt;“Hello”&lt;/li&gt;
  &lt;li&gt;[[4,2,1]]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And what doesn’t match&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“Foo”&lt;/li&gt;
  &lt;li&gt;5.7&lt;/li&gt;
  &lt;li&gt;[2, 2.3]&lt;/li&gt;
  &lt;li&gt;[[“some string”]]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The outer tuple is just a container of multiple possible type signatures and has no role in type matching.&lt;/p&gt;

&lt;p&gt;It was easy, isn’t it?&lt;/p&gt;

&lt;p&gt;Okay, so after some iterations, I was finally able to get the concerned PR merged : tada:&lt;/p&gt;

&lt;h3 id=&quot;implementing-infoextractor-classes&quot;&gt;Implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtractor&lt;/code&gt; classes&lt;/h3&gt;

&lt;p&gt;For the first phase, the files we ended up picking were&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;package.json&lt;/li&gt;
  &lt;li&gt;Gemfile&lt;/li&gt;
  &lt;li&gt;.editorconfig&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the implementation of the Information Extraction Framework, the only tasks that I need to focus on are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Parsing the file.&lt;/li&gt;
  &lt;li&gt;Finding information from the parsed file.
Rest everything (locating files, storing information, validating information, validating filenames, representing information, etc.) is taken care by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Info&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtraction&lt;/code&gt; classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was lucky to find the Gemfile parser on PyPI, but for &lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt; We decided to make and use a custom parser derived from their “editorconfig-core-py” repository. Somehow I was able to make everything work together and make PRs of all three of them in a good-shape.&lt;/p&gt;

&lt;p&gt;That’s all folks! I’m not gonna bore you guys more (brevity is a dying art :P). Stay tuned for more updates…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">Hey everyone! I hope you all are having a fantastic summer. The first phase of my GSoC project is about to end, and I’ll be soon filling up my evaluation. In this post, I’ll summarize my progress (like I’ve been doing in all my previous posts :p). Okay so here it goes.</summary></entry><entry><title type="html">GSoC Update- Mid of Phase 1</title><link href="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Update-Mid-of-Phase-1/" rel="alternate" type="text/html" title="GSoC Update- Mid of Phase 1" /><published>2017-06-10T05:51:36+05:30</published><updated>2017-06-10T05:51:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/GSoC-Update-Mid-of-Phase-1</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/GSoC-Update-Mid-of-Phase-1/">&lt;p&gt;Hey folks, hope everyone is doing great in this summer vaccation season. I saw statistics released from Google lately and was really happy to know that my university had the third highest number of GSoC students selected in the world :). Anyways, in this blog post I’ll summarize my work for these past two weeks.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR;&lt;/h2&gt;
&lt;p&gt;Here’s what I was upto last two weeks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implemented modules for representing information and extracting information.&lt;/li&gt;
  &lt;li&gt;Created upstream issues for some of the things, would be probably working on them on my own if time allows (stretch goals)&lt;/li&gt;
  &lt;li&gt;Added Appveyor continuous integration for windows.&lt;/li&gt;
  &lt;li&gt;Added Travis CI on my project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;In the upcoming weeks, I’ll be working on writing extraction modules for extracting information of interest to coala from common kinds of meta-files. If you’re wondering what these files are, well they are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gruntfile.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gulpfile.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-deeper-dive-into-my-work&quot;&gt;A deeper dive into my work&lt;/h2&gt;

&lt;p&gt;These 2 weeks have been a good learning experience to me. I got to learn more about Object oriented functionalities in python and I explored the world of hosted Continuous Integration and Delivery platforms in-depth.&lt;/p&gt;

&lt;h3 id=&quot;week-1&quot;&gt;Week 1&lt;/h3&gt;

&lt;p&gt;The primary tasks for this week were to create a working prototype for the cEP (coala’s Enhancement Proposal) that I proposed. Having a cEP in advance made it easier for me to take design specific decisions (I’m kinda starting to like “plan well before implement” stuff approach as opposed to the Hackathon-like approaches where I just dived into implementation and the see where it ends up). I wrote extensive tests for both of my modules, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;Info&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;InfoExtctor&lt;/code&gt;. Another important decision that I had to make was the directory structure and location of these modules (should these go into &lt;code class=&quot;highlighter-rouge&quot;&gt;coalib&lt;/code&gt; or just remain in &lt;code class=&quot;highlighter-rouge&quot;&gt;quickstart&lt;/code&gt;). After discussion with my mentors we agreed upon keeping them in quickstart’s repo only.&lt;/p&gt;

&lt;p&gt;I already made a PR for my Week 1 and I expect to get it merged soon.&lt;/p&gt;

&lt;h3 id=&quot;week-2&quot;&gt;Week 2&lt;/h3&gt;

&lt;p&gt;After weekly meeting of Week 1, we ended up modifying our proposed timeline. As suggested by one of the maintainers (John), we shifted the continuous Integration tasks from Phase 3 to Phase 1 and decided to push everything in the timeline downwards by 1 week. I believe that it was a good decision because it is better to catch and fix platform specific issues earlier during implementation rather than having them reported later (prevention is better than cure!).&lt;/p&gt;

&lt;p&gt;So in the second week, I worked on adding Continuous Integration platforms Appveyor and Travis CI to coala-quickstart similar to other existing coala repositiories. It turned out to more reigorous and complicated than I expected and I ended up making around ~90 attempts to get all of them working at once (that’s probably due to my wrong approach of doing things the hit-and-trial way, I should have understood concepts first and then tried to build things from scratch, but nevermind, that’s how you learn :P). Finally I ended up making them work successfully and I’m very happy about it (earlier I used to shy away from issues related to CI but I don’t think now I’ll ever do that).&lt;/p&gt;

&lt;p&gt;So after the first two weeks, I was able to set up a basic structure and CI system for my upcoming Tasks.&lt;/p&gt;

&lt;p&gt;That’s all folks! Stay tuned for more updates…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">Hey folks, hope everyone is doing great in this summer vaccation season. I saw statistics released from Google lately and was really happy to know that my university had the third highest number of GSoC students selected in the world :). Anyways, in this blog post I’ll summarize my work for these past two weeks.</summary></entry><entry><title type="html">Two weeks into Community Bonding</title><link href="http://localhost:4000/blog/posts/personal/gsoc/two-weeks-into-community-bonding/" rel="alternate" type="text/html" title="Two weeks into Community Bonding" /><published>2017-05-20T05:51:36+05:30</published><updated>2017-05-20T05:51:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/two-weeks-into-community-bonding</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/two-weeks-into-community-bonding/">&lt;p&gt;So it’s been more than two weeks into the Community bonding period, my examinations are about to get over (finally:sweat_smile:) and I’ve planned out my milestones with my mentors. Looks like I’ll be all set to code after 1 week.&lt;/p&gt;

&lt;p&gt;Here’s what I was upto past two weeks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I introduced myself and my project on the mailing lists.&lt;/li&gt;
  &lt;li&gt;Disucssed my projects with my mentors and made adjustments to my timline.&lt;/li&gt;
  &lt;li&gt;Did some research on the meta-files and the information to work on during my first phase of the project.&lt;/li&gt;
  &lt;li&gt;Created milestones and issues on Gitlab to keep track of my progress over the entire GSoC period.&lt;/li&gt;
  &lt;li&gt;Proposed a cEP (coala Enhancement Proposal) regarding approach in Phase 1 of my project.&lt;/li&gt;
  &lt;li&gt;Managed to get past my theory exams somehow :P , still left with Minor Project and Winter-training viva.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Some nice links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My post in mailing list - &lt;a href=&quot;https://groups.google.com/forum/#!topic/coala-devel/0A_Wz3pyWgk&quot;&gt;https://groups.google.com/forum/#!topic/coala-devel/0A_Wz3pyWgk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The cEP I proposed - &lt;a href=&quot;https://github.com/satwikkansal/cEPs/blob/f5f7ac61d263de759be47414fe6a210fae1c84c0/cEP-0009.md&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Description of my project - &lt;a href=&quot;http://projects.coala.io/#/projects?project=enhance_coala-quickstart&quot;&gt;http://projects.coala.io/#/projects?project=enhance_coala-quickstart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;My project milestones -
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/6&quot;&gt;BONDING&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/20&quot;&gt;PHASE 1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/21&quot;&gt;PHASE 2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/22&quot;&gt;PHASE 3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://gitlab.com/coala/GSoC-2017/milestones/41&quot;&gt;STRETCH GOALS&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html">So it’s been more than two weeks into the Community bonding period, my examinations are about to get over (finally:sweat_smile:) and I’ve planned out my milestones with my mentors. Looks like I’ll be all set to code after 1 week.</summary></entry><entry><title type="html">My GSoC story begins</title><link href="http://localhost:4000/blog/posts/personal/gsoc/my-gsoc-story-begins/" rel="alternate" type="text/html" title="My GSoC story begins" /><published>2017-05-02T06:51:36+05:30</published><updated>2017-05-02T06:51:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/gsoc/my-gsoc-story-begins</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/gsoc/my-gsoc-story-begins/">&lt;p&gt;&lt;img src=&quot;https://image.ibb.co/gqKL1Q/gsoc2.png&quot; alt=&quot;GSoC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:tada: That was the most exciting moment in past few months as I finally acheived my 2-year awaited GSoC dream. I started contributing to &lt;strong&gt;coala&lt;/strong&gt; since the very first day of 2017 (Not a new year resolution though :P) and no doubt, the journey so far had been awesome and offered me a lot of opportunities to learn and grow as a developer. The last few months have indeed been bit hectic but the outcomes have been worth every effort.&lt;/p&gt;

&lt;h2 id=&quot;about-my-project&quot;&gt;About my project&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://preview.ibb.co/fpNwak/gsoc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can read the abstract &lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#4853947354316800&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-road-ahead&quot;&gt;The road ahead&lt;/h2&gt;

&lt;p&gt;This month is officialy a “community-bonding-period”. As I’m already familiar with the community as well as the codebase of &lt;code class=&quot;highlighter-rouge&quot;&gt;coala-quickstart&lt;/code&gt;, I plan to do extensive research about implementation of my project in this period so that I don’t face much difficulties during the upcoming “coding-phases”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; There’s gonna be &lt;strong&gt;lot&lt;/strong&gt; of upcoming blog-posts regarding my GSoC journey and the new things that I learn on my way. Stay tuned…&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="coala" /><summary type="html"></summary></entry><entry><title type="html">A fresh start with my little web-space</title><link href="http://localhost:4000/blog/posts/personal/a-fresh-start/" rel="alternate" type="text/html" title="A fresh start with my little web-space" /><published>2017-05-02T06:51:36+05:30</published><updated>2017-05-02T06:51:36+05:30</updated><id>http://localhost:4000/blog/posts/personal/a-fresh-start</id><content type="html" xml:base="http://localhost:4000/blog/posts/personal/a-fresh-start/">&lt;p&gt;After mashing up 3-4 jekyll themes and doing few modifications over the past month, I ended up with the new design of my &lt;a href=&quot;http://www.satwikkansal.xyz&quot;&gt;website&lt;/a&gt; ,shifted my blog from &lt;a href=&quot;https://www.satwikkansal.wordpress.com&quot;&gt;wordpress&lt;/a&gt; to &lt;a href=&quot;http://satwikkansal.xyz/blog&quot;&gt;jekyll&lt;/a&gt;, and created a &lt;a href=&quot;http://satwikkansal.xyz/projects&quot;&gt;portfolio&lt;/a&gt; to share my projects. All of this was a long overdue (and still a lot of stuff to implement) but I think the basic structure is ready right now.&lt;/p&gt;

&lt;p&gt;The reason I called this post a “Fresh Beginning” is &lt;!--more--&gt; there are lots of things that I’m planning to do (&lt;strong&gt;strictly&lt;/strong&gt; :sweat_smile:) from next month onwards. Few of them are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Blog often&lt;/strong&gt; : I don’t have any followers though, but blogging actually is a good practice to understand things in detail and present them in the simplest way possible. Also, it would help me to track my progress so far as a developer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Try different platforms&lt;/strong&gt;: Would like to spend more time on Twitter, Medium, Reddit and Quora and stay as away as I could from Facebook. Facebook is all messed up these days, even the messenger app is bloated with all kinds of messaging-app features that exist on earth.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Work on serious projects&lt;/strong&gt;: I’ve few good ideas to implement which I’d like to focus on and pursue till the completion (making something that is usable by others). Would also try to find some new “collaborator-friends” who have similar skillset as mine to work on large but cool projects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Try and explore more technologies:&lt;/strong&gt; Augmented Reality and few Machine Learning fields (Genrative Adversarial Networks, Reinforcement Learning) are on my list. Let’s see if I’m able to come up with some interesting applications of these technologies.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="website" /><category term="goals" /><summary type="html">After mashing up 3-4 jekyll themes and doing few modifications over the past month, I ended up with the new design of my website ,shifted my blog from wordpress to jekyll, and created a portfolio to share my projects. All of this was a long overdue (and still a lot of stuff to implement) but I think the basic structure is ready right now. The reason I called this post a “Fresh Beginning” is</summary></entry><entry><title type="html">Python practices for efficient and optimized code</title><link href="http://localhost:4000/blog/posts/python/python-programming-practices-for-efficient-and-optimized-code/" rel="alternate" type="text/html" title="Python practices for efficient and optimized code" /><published>2016-12-27T06:51:36+05:30</published><updated>2016-12-27T06:51:36+05:30</updated><id>http://localhost:4000/blog/posts/python/python-programming-practices-for-efficient-and-optimized-code</id><content type="html" xml:base="http://localhost:4000/blog/posts/python/python-programming-practices-for-efficient-and-optimized-code/">&lt;p&gt;In this blog post,  I will try to cover common techniques to write more efficient and optimized code in Python. By efficient and optimized I mean - &lt;!--more--&gt; A code that requires minimum memory, executes faster, looks clean, is properly documented and makes it easy for other developers to collaborate. This might help you while contributing to an Open Source organization, submitting a solution to an Online Judge, working on large data processing problems like Machine Learning or while making your own project.&lt;/p&gt;

&lt;p&gt;So let’s get started!&lt;/p&gt;

&lt;h2&gt;Don’t blow off the memory&lt;/h2&gt;

&lt;p&gt;Unlike C/C++, Python’s memory management is performed by the interpreter and the
&lt;!--more Keep on reading!--&gt;
users have no control over it. Memory management in Python involves a private heap containing all Python objects and data structures. The management of this private heap is ensured internally by the &lt;em&gt;Python memory manager&lt;/em&gt;. So you just create an object and the Python Virtual Machine handles the memory needed and where it shall be placed in the memory layout. However, a deep insight of how the things work and different ways to do them can help you minimize memory usage of your program.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Use generators for calculating large sets of results. Generators give you lazy evaluation. You use them by iterating over them, either explicitly with 'for' or implicitly by passing it to any function or construct that iterates. You can think of generators as returning multiple items, as if they return a list, but instead of returning them all at once they return them one-by-one, and the generator function is paused until the next item is requested. Read more about Python Generators from &lt;a href=&quot;https://jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;For large number/data crunching, you can use libraries like &lt;a href=&quot;http://www.numpy.org/&quot;&gt;Numpy&lt;/a&gt; which handle memory management gracefully.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Track your memory usage at object level by using inbuilt modules like &lt;a href=&quot;https://docs.python.org/2/library/resource.html&quot;&gt;resource &lt;/a&gt;and &lt;a href=&quot;https://mg.pov.lt/objgraph/&quot; target=&quot;_blank&quot;&gt;objgraph&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Managing memory leaks in Python can be a tough job but luckily there are tools like &lt;a href=&quot;https://pypi.python.org/pypi/guppy/&quot; target=&quot;_blank&quot;&gt;heapy&lt;/a&gt; for debugging memory leaks. &lt;em&gt;heapy&lt;/em&gt; can be used along with &lt;em&gt;objgraph&lt;/em&gt; to watch allocation growth of diff objects over time. &lt;em&gt;heapy&lt;/em&gt; can show which objects are holding the most memory etc.&lt;em&gt; objgraph&lt;/em&gt; can help in finding the backreferences to understand exactly why they cannot be freed. You can read more about diagnosing memory leaks in Python from &lt;a href=&quot;http://chase-seibert.github.io/blog/2013/08/03/diagnosing-memory-leaks-python.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Use format instead of ‘+’ for generating strings -  In Python,  &lt;code&gt;str&lt;/code&gt; is immutable, so the left and right string have to be copied into the new string for every pair of concatenation. If you concatenate four strings of length 10, you will be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters, instead of just 40 characters. And things gets quadratically worse as the number and size of the string increases. Java optimizes this case some of the times by transforming the series of concatenation to use &lt;code&gt;StringBuilder&lt;/code&gt;, but CPython doesn't. So it is advised to use .format or % syntax. If you can't decide which one to choose among .format and %, check &lt;a href=&quot;http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format&quot;&gt;this&lt;/a&gt; interesting Stackoverflow thread.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Use &lt;em&gt;__slots__&lt;/em&gt; when defining a Python class. You can tell Python not to use a dynamic &lt;em&gt;dict&lt;/em&gt;, and only allocate space for a fixed set of attributes eliminating the overhead of one dict for every object by settings &lt;code&gt;__slots__&lt;/code&gt; on the class to a fixed list of attribute names. Read more about &lt;em&gt;slots&lt;/em&gt; from &lt;a href=&quot;http://stackoverflow.com/questions/472000/usage-of-slots&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read a bit in detail about memory management in Python by the developers of Theano from &lt;a href=&quot;http://deeplearning.net/software/theano/tutorial/python-memory-management.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Python 2 or Python 3? Both!&lt;/h2&gt;

&lt;p&gt;When starting a new Python project or even starting with Python altogether you may have found yourself in the dilemma of choosing Python 2 or Python 3. This is a widely discussed topic with many opinions and good explanations on the internet. However, it is actually possible to write code in a way that works on both Python 2 and Python 3 interpreters. The most common way to achieve this use packages like &lt;em&gt;future, builtins&lt;/em&gt;, and six to maintain a single, clean Python 3.x-compatible codebase and support both Python 2 and Python 3 with minimal overhead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;span class=&quot;pre&quot;&gt;python-future&lt;/span&gt;&lt;/code&gt; is the missing compatibility layer between Python 2 and Python 3.It provides &lt;code&gt;&lt;span class=&quot;pre&quot;&gt;future&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;pre&quot;&gt;past&lt;/span&gt;&lt;/code&gt; packages with backports and forward ports of features from Python 3 and 2. It also comes with &lt;code&gt;&lt;span class=&quot;pre&quot;&gt;futurize&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;pre&quot;&gt;pasteurize&lt;/span&gt;&lt;/code&gt;, customized 2to3-based scripts that help you to convert either Py2 or Py3 code easily to support both Python 2 and 3 in a single clean Py3-style codebase, module by module.&lt;/p&gt;

&lt;p&gt;Please do check the awesome &lt;strong&gt;Cheat Sheet&lt;/strong&gt; for writing Python 2-3 compatible code by Ed Schofield. And if you’re more into watching videos than reading then you may find his talk at PyCon AU 2014, “&lt;a href=&quot;http://www.youtube.com/watch?v=KOqk8j11aAI&amp;amp;t=10m14s&quot;&gt;Writing 2/3 compatible code&lt;/a&gt;” helpful.&lt;/p&gt;

&lt;h2&gt;The first impression is the last impression&lt;/h2&gt;

&lt;p&gt;Sharing code is a rewarding endeavor.  Whatever the motivation, your good intentions may not have the desired outcome if people find your code hard to use or understand. Almost every organization follows style guidelines that developers have to follow for consistency, easy debugging, and ease of collaboration. The &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot;&gt;Zen of Python&lt;/a&gt; is like a mini style and design guide for Python. Following are some of the popular style guidelines for Python:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP-8 style guide&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.memonic.com/user/pneff/folder/python/id/1bufp&quot;&gt;Python Idioms and efficiency&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://google.github.io/styleguide/pyguide.html&quot;&gt;Google Python Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These guidelines discuss how to use whitespace, using commas and braces, how to, object naming guidelines, etc.Though they may be conflicting each other at some situation but all of them really have the same objective - Clean, Readable, and Debuggable standard for code. So just stick to one, or follow your own guide but don’t try to follow something drastically different from widely accepted standards.&lt;/p&gt;

&lt;h3&gt;Using pylint&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://www.logilab.org/857&quot;&gt;Pylint&lt;/a&gt; is a Python tool that checks a module for coding standards. &lt;em&gt;Pylint&lt;/em&gt; can be a quick and easy way of seeing if your code has captured the essence of PEP-8 and is therefore ‘friendly’ to other potential users. It also provides you reports with insightful metrics and statistics that may help you judge the quality of code. You can also customize it by creating your own &lt;em&gt;.pylintrc&lt;/em&gt; file and using it.&lt;/p&gt;

&lt;p&gt;Pylint is not the only choice, there are other tools like &lt;em&gt;PyChecker, PyFlakes,&lt;/em&gt; and packages like &lt;em&gt;pep8 and flakes8&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Reports and analysis&lt;/h2&gt;

&lt;p&gt;It is often helpful to analyze your code for coverage, quality, and performance. For evaluating performance, Python comes with the &lt;a href=&quot;https://docs.python.org/2/library/profile.html#module-cProfile&quot; target=&quot;_blank&quot;&gt;cProfile&lt;/a&gt; module. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations. Here’s how a sample analysis by &lt;em&gt;cProfile&lt;/em&gt; look like&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-574&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/screenshot-from-2016-12-26-17-34-10.png&quot; alt=&quot;screenshot-from-2016-12-26-17-34-10&quot; width=&quot;719&quot; height=&quot;233&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fabianp/memory_profiler&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;memory_profiler&lt;/strong&gt;&lt;/a&gt; :  It’s a python module for monitoring memory consumption of a process as well as line-by-line analysis of memory consumption for python programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;a href=&quot;http://mg.pov.lt/objgraph/&quot;&gt;objgraph&lt;/a&gt;&lt;/strong&gt; : It allows you to show the top N objects occupying our python program’s memory, show what objects have been deleted or added over a period of time and show all references to a given object in your script.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/resource.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;resource&lt;/strong&gt;&lt;/a&gt; : This module provides basic mechanisms for measuring and controlling system resources utilized by a program. Two prime uses include limiting the allocation of resource and getting information about the current usage of the resource.&lt;/p&gt;

&lt;h2&gt;Multiprocess, not Multi-thread&lt;/h2&gt;

&lt;p&gt;When it comes to improving the execution time of your multiple-task code, you may want to utilize multiple cores in the CPU to execute several tasks simultaneously. Intuitively, it may come to your mind to spawn several threads and let them execute concurrently, but due to Global Interpreter Lock in Python, all you’re doing is making your threads execute on the same core turn by turn.&lt;/p&gt;

&lt;p&gt;To achieve actual parallelization in Python, you might have a use &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html&quot;&gt;multiprocessing &lt;/a&gt;module of Python. Another solution might be outsourcing the tasks to:-&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;The operating system (by doing multi-processing)&lt;/li&gt;
    &lt;li&gt;Some external application that calls your Python code (eg, Spark or Hadoop)&lt;/li&gt;
    &lt;li&gt;Some code that your Python code calls (eg: you could have your Python code call a C function that does the expensive multi-threaded stuff).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Test often&lt;/h2&gt;

&lt;p&gt;It is a good practice to write unit and if you think that writing tests is not worth the effort take a look at &lt;a href=&quot;http://stackoverflow.com/questions/67299/is-unit-testing-worth-the-effort&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; Stackoverflow thread. Test-driven development is about &lt;em&gt;development&lt;/em&gt; (and design), specifically improving the quality and design of code.Also, it’s better to write your tests before or during coding. Python provides &lt;a href=&quot;https://docs.python.org/2/library/unittest.html&quot; target=&quot;_blank&quot;&gt;unittest&lt;/a&gt; module to write unit tests for your functions and classes. There are alternatives like:&lt;/p&gt;

&lt;p style=&quot;padding-left:30px;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://pythontesting.net/framework/nose/nose-introduction/&quot;&gt;nose&lt;/a&gt;&lt;/strong&gt; - can run &lt;em&gt;unittest&lt;/em&gt; tests, and has less boilerplate.
&lt;strong&gt;&lt;a href=&quot;http://pythontesting.net/framework/pytest/pytest-introduction/&quot;&gt;pytest&lt;/a&gt;&lt;/strong&gt; - also runs &lt;em&gt;unittest&lt;/em&gt; tests, has less boilerplate, better reporting, lots of cool extra features.&lt;/p&gt;

&lt;p style=&quot;padding-left:30px;&quot;&gt;To get a good comparison of all of these, read through the introductions to each &lt;a href=&quot;http://pythontesting.net/start-here&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coverage.readthedocs.io/en/coverage-4.2/&quot; target=&quot;_blank&quot;&gt;coverage&lt;/a&gt; is a tool for measuring code coverage of Python programs. It monitors your program, noting which parts of the code have been executed, then analyzes the source to identify code that could have been executed but was not. Coverage measurement is typically used to gauge the effectiveness of tests. It can show which parts of your code are being exercised by tests, and which are not.&lt;/p&gt;

&lt;p&gt;That’s how much I know for now, and I’ll try to add more topics and stuff to this post as I discover them in my journey as a Python developer. Thanks for reading!&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="python" /><category term="optimization" /><category term="efficency" /><summary type="html">In this blog post,  I will try to cover common techniques to write more efficient and optimized code in Python. By efficient and optimized I mean -</summary></entry><entry><title type="html">7 things I learnt from coala</title><link href="http://localhost:4000/blog/posts/oss/7-things-i-learned-from-coala/" rel="alternate" type="text/html" title="7 things I learnt from coala" /><published>2016-12-27T06:51:36+05:30</published><updated>2016-12-27T06:51:36+05:30</updated><id>http://localhost:4000/blog/posts/oss/7-things-i-learned-from-coala</id><content type="html" xml:base="http://localhost:4000/blog/posts/oss/7-things-i-learned-from-coala/">&lt;p&gt;So this New Year, I started seriously contributing to Open Source. After going through tons of organizations I shortlisted a few of 3-5 based on my interests, skills, and several other factors (I like some maths and analysis!). But I soon discovered keeping up with several organizations is more pain and less gain for me. So now I’m down to only 1 organization that I’d put my best efforts into. coala is a user-friendly language independent code analysis tool built mostly using Python. It’s been exactly 2 weeks contributing to coala. Following are some of the things that I found interesting about coala:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;coala starts with a lower case ‘c’ and not ‘C’.&lt;/li&gt;
  &lt;li&gt;coala is vast! There are many coala projects on Gitlab as well. There are around 10 gitter rooms, and tons of other communication channels for coala apart from Gitter. Check &lt;a href=&quot;https://github.com/coala/coala/wiki/Communication-Channels&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;People here are fun. Well at least much more fun than other organizations I’ve tried to contribute and failed (I guess that’s the reason I decided to just stick this time)&lt;/li&gt;
  &lt;li&gt;Try using coala in your projects as well. It’s fun and made me realize how badly I disregarded &lt;code class=&quot;highlighter-rouge&quot;&gt;PEP8&lt;/code&gt; earlier :P Contributing to Coala is helping me be more disciplined as a programmer like writing cleaner code, good commit practices and much more.&lt;/li&gt;
  &lt;li&gt;Don’t tag &lt;strong&gt;@sils&lt;/strong&gt; unnecessarily in gitter. Yeah, this topic often comes up in the channel. He’s a nice guy but he has other works as well. Other maintainers like &lt;strong&gt;@jayvdb&lt;/strong&gt;, &lt;strong&gt;@udayan&lt;/strong&gt;, &lt;strong&gt;@makman2&lt;/strong&gt;, &lt;strong&gt;@fneu&lt;/strong&gt;, &lt;strong&gt;@adrianzatreanu&lt;/strong&gt;, &lt;strong&gt;@mixih&lt;/strong&gt;, &lt;strong&gt;@adtac&lt;/strong&gt; and many quality developers there to help out if one get’s stuck.&lt;/li&gt;
  &lt;li&gt;Review other people’s code, or at least try to see how they approached solving the issue. Code reviewing is as important as creating a Pull Request. I’m now trying to improve my capabilities to find functionality related bugs in the code.&lt;/li&gt;
  &lt;li&gt;Don’t ask for help on the channel before trying to help yourself. coalians are not dependent on someone else, they solve their problems on their own. I mean we should do some research on our end before posting a question/error. I realized that a simple mistake on my end could waste a lot of valuable time of someone else.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And if you didn’t noticed that I spelled coala with an Uppercase ‘C’ in the 4th point, it’s okay! Next time you’ll never miss this. Have fun :)&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="python" /><category term="oss" /><category term="coala" /><summary type="html">So this New Year, I started seriously contributing to Open Source. After going through tons of organizations I shortlisted a few of 3-5 based on my interests, skills, and several other factors (I like some maths and analysis!). But I soon discovered keeping up with several organizations is more pain and less gain for me. So now I’m down to only 1 organization that I’d put my best efforts into. coala is a user-friendly language independent code analysis tool built mostly using Python. It’s been exactly 2 weeks contributing to coala. Following are some of the things that I found interesting about coala: coala starts with a lower case ‘c’ and not ‘C’. coala is vast! There are many coala projects on Gitlab as well. There are around 10 gitter rooms, and tons of other communication channels for coala apart from Gitter. Check this People here are fun. Well at least much more fun than other organizations I’ve tried to contribute and failed (I guess that’s the reason I decided to just stick this time) Try using coala in your projects as well. It’s fun and made me realize how badly I disregarded PEP8 earlier :P Contributing to Coala is helping me be more disciplined as a programmer like writing cleaner code, good commit practices and much more. Don’t tag @sils unnecessarily in gitter. Yeah, this topic often comes up in the channel. He’s a nice guy but he has other works as well. Other maintainers like @jayvdb, @udayan, @makman2, @fneu, @adrianzatreanu, @mixih, @adtac and many quality developers there to help out if one get’s stuck. Review other people’s code, or at least try to see how they approached solving the issue. Code reviewing is as important as creating a Pull Request. I’m now trying to improve my capabilities to find functionality related bugs in the code. Don’t ask for help on the channel before trying to help yourself. coalians are not dependent on someone else, they solve their problems on their own. I mean we should do some research on our end before posting a question/error. I realized that a simple mistake on my end could waste a lot of valuable time of someone else. And if you didn’t noticed that I spelled coala with an Uppercase ‘C’ in the 4th point, it’s okay! Next time you’ll never miss this. Have fun :)</summary></entry><entry><title type="html">Popular Python Interview Questions</title><link href="http://localhost:4000/blog/posts/python/common-python-interview-questions/" rel="alternate" type="text/html" title="Popular Python Interview Questions" /><published>2016-12-24T09:09:06+05:30</published><updated>2016-12-24T09:09:06+05:30</updated><id>http://localhost:4000/blog/posts/python/common-python-interview-questions</id><content type="html" xml:base="http://localhost:4000/blog/posts/python/common-python-interview-questions/">&lt;p&gt;This blog post will cover some of the typical Python questions asked in Interviews when you’re  applying for a Python related job. &lt;!--more--&gt; I assume that you’ve basic knowledge of Python and can write programs in python easily.&lt;/p&gt;

&lt;p&gt;I would try to put all the content and links in this post that I’ve gathered from various sources on the internet including Stack Overflow, Code Mentor, Learn python the Hard Way and many other resources.&lt;/p&gt;

&lt;p&gt;So without wasting much time, Let’s dive in!&lt;/p&gt;

&lt;!--more Keep on reading!--&gt;

&lt;h2&gt;How is Python different from other languages like C++, Java, etc?&lt;/h2&gt;

&lt;p&gt;Python is an interpreted language. That means that, unlike languages like &lt;i&gt;C&lt;/i&gt; and its variants, Python does not need to be compiled before it is run. Other interpreted languages include &lt;i&gt;PHP&lt;/i&gt; and &lt;i&gt;Ruby&lt;/i&gt;.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Python is dynamically typed, this means that you don't need to state the types of variables when you declare them or anything like that. You can do things like x=111 and then x=&quot;I'm a string&quot; without error&lt;/li&gt;
    &lt;li&gt;Python is well suited to object orientated programming in that it allows the definition of classes along with composition and inheritance. Python does not have access specifiers (like C++'s public, private), the justification for this point is given as &quot;we are all adults here&quot;&lt;/li&gt;
    &lt;li&gt;In Python, functions are first-class objects. This means that they can be assigned to variables, returned from other functions and passed into functions. Classes are also first class objects&lt;/li&gt;
    &lt;li&gt;Writing Python code is quick but running it is often slower than compiled languages. Fortunately， Python allows the inclusion of C-based extensions so bottlenecks can be optimized away and often are. The numpy package is a good example of this, it's really quite quick because a lot of the number crunching it does isn't actually done by Python&lt;/li&gt;
    &lt;li&gt;Python finds use in many spheres - web applications, automation, scientific modeling, big data applications and much more. It's also often used as &quot;glue&quot; code to get other languages and components to play nice.&lt;/li&gt;
    &lt;li&gt;Python makes difficult things easy so programmers can focus on overriding algorithms and structures rather than nitty-gritty low-level details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python has five standard data types −&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Numbers&lt;/li&gt;
    &lt;li&gt;String&lt;/li&gt;
    &lt;li&gt;List&lt;/li&gt;
    &lt;li&gt;Tuple&lt;/li&gt;
    &lt;li&gt;Dictionary&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How is Python 2 different from Python 3?&lt;/h2&gt;

&lt;p&gt;Definitely, Python 3.x is an improvement over Python 2.x, but there are reasons to continue to use Python 2.x or to write code in such a way that it’s compatible with both the versions because most of the third-party libraries and frameworks that are still written for Python 2.x.&lt;/p&gt;

&lt;p&gt;Please go through &lt;a href=&quot;http://sebastianraschka.com/Articles/2014_python_2_3_key_diff.html&quot;&gt;this&lt;/a&gt; wonderful comparison blog post by Sebastian Raschka as this question is often asked in the interviews related to Python.&lt;/p&gt;

&lt;h2&gt;How does multithreading works in Python?&lt;/h2&gt;

&lt;p&gt;Python doesn’t allow multi-threading in the truest sense of the word. It has a&lt;a href=&quot;https://docs.python.org/2/library/threading.html&quot;&gt; multi-threading package&lt;/a&gt; (threading.py) but if you want to multi-thread to speed your code up, then it’s usually not a good idea to use it. Python has a construct called the &lt;b&gt;Global Interpreter Lock (GIL).&lt;/b&gt; The GIL makes sure that &lt;i&gt;only one of your ‘threads’ can execute at any one time.&lt;/i&gt; A thread acquires the GIL, does a little work, then passes the GIL onto the next thread. This happens very quickly so to the human eye it may seem like &lt;b&gt;your threads are&lt;/b&gt; executing in parallel, but they are really just &lt;b&gt;taking turns using the same CPU core&lt;/b&gt;. All this GIL passing &lt;b&gt;adds overhead to execution&lt;/b&gt;. This means that if you want to make your code run faster then using the threading package often isn’t a good idea.&lt;/p&gt;

&lt;p&gt;There are reasons to use Python’s threading package. &lt;i&gt;If you want to run some things simultaneously, and efficiency is not a concern, then it’s totally fine and convenient&lt;/i&gt;. Or if you are running code that needs to wait for something (like some IO) then it could make a lot of sense. &lt;b&gt;But the threading library won’t let you use extra CPU cores.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Multi-threading &lt;b&gt;can be outsourced&lt;/b&gt; to:-&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;The operating system (by doing multi-processing)&lt;/li&gt;
    &lt;li&gt;Some external application that calls your Python code (eg, Spark or Hadoop)&lt;/li&gt;
    &lt;li&gt;Some code that your Python code calls (eg: you could have your Python code call a C function that does the expensive multi-threaded stuff).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve actual parallelization in Python, you might have a look at &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html&quot;&gt;multiprocessing &lt;/a&gt;module of Python. A few snaps from Stackoverflow regarding this:-&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-227&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/image05.png&quot; alt=&quot;image05&quot; width=&quot;1323&quot; height=&quot;403&quot; /&gt;&lt;img class=&quot;alignnone size-full wp-image-228&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/image00.png&quot; alt=&quot;image00&quot; width=&quot;1014&quot; height=&quot;920&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, it’s good to know difference detailed difference between Multithreading and Multiprocessing.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-233&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/threading_vs_processing.png&quot; alt=&quot;threading_vs_processing.png&quot; width=&quot;726&quot; height=&quot;966&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;How does call by reference or call by value work in Python?&lt;/h2&gt;

&lt;p&gt;When asked whether Python function calling model is “call-by-value” or “call-by-reference”, the correct answer is: &lt;strong&gt;neither&lt;/strong&gt;. Instead, in Python arguments are &lt;a href=&quot;http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference&quot; rel=&quot;nofollow noreferrer&quot;&gt;passed by assignment&lt;/a&gt;. The rationale behind this is twofold:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;the parameter passed in is actually a &lt;em&gt;reference&lt;/em&gt; to an object (but the reference is passed by value)&lt;/li&gt;
    &lt;li&gt;some data types are mutable, but others aren't&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;If you pass a &lt;em&gt;mutable&lt;/em&gt; object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object.&lt;/li&gt;
    &lt;li&gt;If you pass an &lt;em&gt;immutable&lt;/em&gt; object to a method, you still can't rebind the outer reference, and you can't even mutate the object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you still don’t get this, Please check &lt;a href=&quot;https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/&quot;&gt;this&lt;/a&gt; blog-post by Jeff Knupp.&lt;/p&gt;

&lt;p&gt;Here’s a small demonstration by code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;l_mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_mem&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# the first call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# [0, 1]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# the second call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# [3, 2, 1, 0, 1, 4]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_mem&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# the third call&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# [0, 1, 0, 1, 4]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;The first function call should be fairly obvious, the loop appends 0 and then 1 to the empty list, l. l is a name for a variable that points to a list stored in memory. The second call starts off by creating a new list in a new block of memory. l then refers to this new list. It then appends 0, 1 and 4 to this new list. So that’s great.&lt;/p&gt;

&lt;p&gt;The third function call is the weird one. It uses the original list stored in the original memory block. That is why it starts off with 0 and 1.&lt;/p&gt;

&lt;p&gt;A cool “Balloon analogy” that I found on some Stackoverflow thread can be helpful:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-253&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/screenshot-from-2016-12-24-13-14-51.png&quot; alt=&quot;screenshot-from-2016-12-24-13-14-51&quot; width=&quot;1151&quot; height=&quot;513&quot; /&gt;&lt;img class=&quot;alignnone size-full wp-image-252&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/screenshot-from-2016-12-24-13-15-07.png&quot; alt=&quot;screenshot-from-2016-12-24-13-15-07&quot; width=&quot;1095&quot; height=&quot;904&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;How does Inheritance works in Python?&lt;/h2&gt;

&lt;p&gt;Being an Object Oriented Language, Python supports Inheritance and Multi-Inheritance as well. You must read this very good Chapter on Inheritance by Zed Shaw, author of the famous book “Learn Python the Hard way”. It advises you to avoid Multiple Inheritance at all costs and use Composition instead.&lt;/p&gt;

&lt;h2&gt;Decorators in Python&lt;/h2&gt;

&lt;p&gt;A decorator is a special kind of function that either takes a function and returns a function or takes a class and returns a class. The &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; symbol is just syntactic sugar that allows you to decorate something in a way that’s easy to read.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@my_decorator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;do_things&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##Is equivalent to&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;do_things&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;my_func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;Decorators are tough to understand initially, but the effort is worth it. There are various concepts like passing arguments, nesting, etc that can be the topics for advanced Python questions. You can find a tutorial on how decorators in general work&lt;a href=&quot;https://www.codementor.io/python/tutorial/introduction-to-decorators&quot;&gt; here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you must be aware of &lt;code class=&quot;highlighter-rouge&quot;&gt;@classmethod&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@staticmethod&lt;/code&gt; decorators in Python.&lt;/p&gt;

&lt;div class=&quot;post-text&quot;&gt;

  &lt;p&gt;&lt;code&gt;@classmethod&lt;/code&gt; means: when this method is called, we pass the class as the first argument instead of the instance of that class (as we normally do with methods). This means you can use the class and its properties inside that method rather than a particular instance.&lt;/p&gt;

  &lt;p&gt;&lt;code&gt;@staticmethod&lt;/code&gt; means: when this method is called, we don’t pass an instance of the class to it (as we normally do with methods). This means you can put a function inside a class but you can’t access the instance of that class (this is useful when your method does not use the instance). This demonstration in Stackoverflow may be helpful to you&lt;/p&gt;

  &lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-341&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/staticvsclass.png&quot; alt=&quot;staticvsclass.png&quot; width=&quot;756&quot; height=&quot;1700&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;Also, there is &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;/code&gt;  which is the pythonic way of using getters and setters. If interested, you can read about it from &lt;a href=&quot;https://www.programiz.com/python-programming/property&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;h2&gt;List comprehension&lt;/h2&gt;
  &lt;p&gt;If you’ve some experience with Python you may find it pretty straightforward but it’s generally a common topic for interviewers to ask for. Make sure you understand the reasoning behind all of the below statements and their expected output.&lt;/p&gt;

  &lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-379&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/screenshot-from-2016-12-24-18-21-22.png&quot; alt=&quot;screenshot-from-2016-12-24-18-21-22&quot; width=&quot;1123&quot; height=&quot;276&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-378&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/screenshot-from-2016-12-24-18-21-38.png&quot; alt=&quot;screenshot-from-2016-12-24-18-21-38&quot; width=&quot;1108&quot; height=&quot;311&quot; /&gt;&lt;/p&gt;
  &lt;h2&gt;Using *args, **kwargs and default parameters&lt;/h2&gt;
  &lt;p&gt;The names and&lt;code&gt;*args&lt;/code&gt; &lt;code&gt;**kwargs&lt;/code&gt; are only by convention but there’s no hard requirement to use them. You would use &lt;code&gt;*args&lt;/code&gt; when you’re not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function. For example:&lt;/p&gt;

  &lt;figure class=&quot;highlight&quot;&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;def print_everything&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;count, thing &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;enumerate&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
...         print &lt;span class=&quot;s1&quot;&gt;'{0}. {1}'&lt;/span&gt;.format&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;count, thing&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
...
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print_everything&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'apple'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'banana'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'cabbage'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0. apple
1. banana
2. cabbage&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/figure&gt;

  &lt;p&gt;Similarly, &lt;code&gt;**kwargs&lt;/code&gt; allows you to handle named arguments that you have not defined in advance:&lt;/p&gt;

  &lt;figure class=&quot;highlight&quot;&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;def table_things&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
...     &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;name, value &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;kwargs.items&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;:
...         print &lt;span class=&quot;s1&quot;&gt;'{0} = {1}'&lt;/span&gt;.format&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name, value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
...
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;table_things&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;apple &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fruit'&lt;/span&gt;, cabbage &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vegetable'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cabbage &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; vegetable
apple &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; fruit&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/figure&gt;

  &lt;p&gt;You can use these along with named arguments too. The explicit arguments get values first and then everything else is passed to &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;. The named arguments come first in the list. For example:&lt;/p&gt;

  &lt;figure class=&quot;highlight&quot;&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;def table_things&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;titlestring, &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/figure&gt;

  &lt;p&gt;You can also use both in the same function definition but &lt;code&gt;*args&lt;/code&gt; must occur before &lt;code&gt;**kwargs&lt;/code&gt;.&lt;/p&gt;

  &lt;figure class=&quot;highlight&quot;&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;You can also use the &amp;lt;code&amp;gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&amp;lt;/code&amp;gt; syntax when calling a &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;. For example:
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;def print_three_things&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a, b, c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
...     print &lt;span class=&quot;s1&quot;&gt;'a = {0}, b = {1}, c = {2}'&lt;/span&gt;.format&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a,b,c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
...
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;mylist &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aardvark'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'baboon'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'cat'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print_three_things&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;mylist&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; aardvark, b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; baboon, c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; cat&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/figure&gt;

  &lt;p&gt;As you can see in this case it takes the list (or tuple) of items and unpacks it. By this, it matches them to the arguments in the function. Of course, you could have a &lt;code&gt;*&lt;/code&gt; both in the function definition and in the function call.&lt;/p&gt;

  &lt;p&gt;Make sure you understand all the statements below before moving forward.&lt;/p&gt;

  &lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-377&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/image08.png&quot; alt=&quot;image08&quot; width=&quot;975&quot; height=&quot;582&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-376&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/image01.png&quot; alt=&quot;image01&quot; width=&quot;982&quot; height=&quot;421&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2&gt;The OS module&lt;/h2&gt;

&lt;p&gt;The OS module can come in very handy time to time, it often helps to go through some of the most commonly use cases of this module. For example, for accessing directory contents in python :&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-273&quot; src=&quot;https://satwikkansal.files.wordpress.com/2016/12/image04.png&quot; alt=&quot;image04.png&quot; width=&quot;1283&quot; height=&quot;941&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;http://www.thomas-cokelaer.info/tutorials/python/module_os.html&quot;&gt;this&lt;/a&gt; blog post by Thomas Cokelaer for detailed functionalities of the OS module in Python.&lt;/p&gt;

&lt;h2&gt;Why do we use &lt;code class=&quot;highlighter-rouge&quot;&gt;if  __name__ == &quot;__main__&quot;&lt;/code&gt; ?&lt;/h2&gt;

&lt;p&gt;When the Python interpreter reads a source file (due to import or due to commands from terminals), it executes all of the code found in it.&lt;/p&gt;

&lt;p&gt;Before executing the code, it will define a few special variables. For example, if the python interpreter is running that module (the source file) as the main program, it sets the special &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; variable to have a value &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;. If this file is being imported from another module, &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; will be set to the module’s name.&lt;/p&gt;

&lt;p&gt;In the case of your script, let’s assume that it’s executing as the main function, e.g. you said something like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;python example.py&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/figure&gt;

&lt;p&gt;on the command line.&lt;/p&gt;

&lt;p&gt;After setting up the special variables, it will execute the import statement and load those modules. It will then evaluate the def block, creating a function object and creating a variable called myfunction that points to the function object. It will then read the if statement and see that &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; does equal &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, so it will execute the block shown there.&lt;/p&gt;

&lt;p&gt;One of the reasons for doing this is that sometimes you write a module (a .py file) where it can be executed directly. Alternatively, it can also be imported and used in another module. By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.&lt;/p&gt;

&lt;h2&gt;Generators and the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword&lt;/h2&gt;

&lt;p&gt;Generators may seem complicated at once but they are very easy and useful. Please read &lt;a href=&quot;https://jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/&quot;&gt;this&lt;/a&gt; awesome blog post by Jeff Knupp to understand the concept in depth.&lt;/p&gt;

&lt;h2&gt;Something about PEP&lt;/h2&gt;

&lt;p&gt;PEP stands for Python Enhancement Proposal. A PEP is a design document providing information to the Python community, or describing a new feature for Python or its processes or environment. The PEP should provide a concise technical specification of the feature and a rationale for the feature. PEPs are intended to be the primary mechanisms for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is responsible for building consensus within the community and documenting dissenting opinions. Some popular PEPs are:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.google.co.in/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjrotTosYzRAhWIv48KHejlCtAQFggbMAA&amp;amp;url=https%3A%2F%2Fwww.python.org%2Fdev%2Fpeps%2Fpep-0008%2F&amp;amp;usg=AFQjCNEQyknQxbzAV5m487Aq_waOwGNgag&amp;amp;sig2=YOKznIETqWWFNRaFsEVnoQ&quot;&gt;PEP 8&lt;/a&gt;,  Python's style guide. It's a set of rules for how to format your Python code to maximize its readability. Writing code to a specification helps to make large code bases, with lots of writers, more uniform and predictable, too.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.python.org/dev/peps/pep-0020/&quot;&gt;Pep 20&lt;/a&gt;: The Zen of Python&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Package management in Python&lt;/h2&gt;

&lt;p&gt;Although the interviewer doesn’t expect you to know nitty-gritty details of the Package management mechanism of Python, but it’s a good chance to show how much you care about the trends and development in the language. Here’s the timeline of how the Packaging in Python is evolved over time.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;b&gt;Distutils&lt;/b&gt; is still the standard tool for packaging in Python. It is included in the standard library (Python 2 and Python 3.0 to 3.4). It is useful for simple Python distributions but lacks features. It introduces the distutils Python package that can be imported in your setup.py script.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;b&gt;Setuptools&lt;/b&gt; was developed to overcome Distutils' limitations and is not included in the standard library. It introduced a command-line utility called &lt;code&gt;easy_install&lt;/code&gt;. It also introduced the setuptools Python package that can be imported in your setup.py script, and the pkg_resources Python package that can be imported in your code to locate data files installed with a distribution. One of its gotchas is that it monkey-patches the distutils Python package. It should work well with pip.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;b&gt;Distribute&lt;/b&gt; was a fork of Setuptools. It shared the same namespace, so if you had Distribute installed, import setuptools would actually import the package distributed with Distribute. &lt;b&gt;&lt;i&gt;Distribute was merged back into Setuptools 0.7&lt;/i&gt;&lt;/b&gt;, so you don't need to use Distribute any more. In fact, the version on PyPI is just a compatibility layer that installs Setuptools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Packages built and distributed using setuptools look to the user like ordinary Python packages based on the distutils. Your users don’t need to install or even know about setuptools in order to use them, and you don’t have to include the entire setuptools package in your distributions. By including just a single&lt;a href=&quot;https://bootstrap.pypa.io/ez_setup.py&quot;&gt; bootstrap module&lt;/a&gt; (a 12K .py file), your package will automatically download and install setuptools if the user is building your package from source and doesn’t have a suitable version already installed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;easy_install&lt;/code&gt; was released in 2004, as part of&lt;a href=&quot;https://packaging.python.org/key_projects/#setuptools&quot;&gt; setuptools&lt;/a&gt;. It was notable at the time for installing&lt;a href=&quot;https://packaging.python.org/glossary/#term-distribution-package&quot;&gt; packages&lt;/a&gt; from&lt;a href=&quot;https://packaging.python.org/glossary/#term-python-package-index-pypi&quot;&gt; PyPI&lt;/a&gt; using requirement specifiers, and automatically installing dependencies.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; was originally written to improve on &lt;code&gt;easy_install&lt;/code&gt; in the following ways:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;All packages are downloaded before installation. Partially-completed installation doesn’t occur as a result.&lt;/li&gt;`
    &lt;li&gt;Care is taken to present useful output on the console.&lt;/li&gt;
    &lt;li&gt;The reasons for actions are kept track of. For instance, if a package is being installed, pip keeps track of why that package was required.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Error messages should be useful.&lt;/li&gt;
    &lt;li&gt;The code is relatively concise and cohesive, making it easier to use programmatically.&lt;/li&gt;
    &lt;li&gt;Packages don’t have to be installed as egg archives, they can be installed flat (while keeping the egg metadata).&lt;/li&gt;
    &lt;li&gt;Native support for other version control systems (Git, Mercurial, and Bazaar)&lt;/li&gt;
    &lt;li&gt;Uninstallation of packages.&lt;/li&gt;
    &lt;li&gt;Simple to define fixed sets of requirements and reliably reproduce a set of packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The current state of things:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Binary packages are now distributed as wheels (`.whl` files)—not just on PyPI, but in third-party repositories like&lt;a href=&quot;http://www.lfd.uci.edu/%7Egohlke/pythonlibs/&quot;&gt; Christoph Gohlke's Extension Packages for Windows&lt;/a&gt;. pip can handle wheels; &lt;code&gt;easy_install&lt;/code&gt; cannot.&lt;/li&gt;
    &lt;li&gt;Virtual environments (which come built-in with 3.4, or can be added to 2.6+/3.1+ with&lt;a href=&quot;https://pypi.python.org/pypi/virtualenv&quot;&gt; virtualenv&lt;/a&gt;) have become a very important and prominent tool (and recommended in&lt;a href=&quot;https://docs.python.org/3/installing/index.html&quot;&gt; the official docs&lt;/a&gt;); they include pip out of the box, but don't even work properly with &lt;code&gt;easy_install&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The distribute package that included &lt;code&gt;easy_install&lt;/code&gt; is no longer maintained. Its improvements over setuptools got merged back into setuptools. Trying to install distribute will just install setuptools instead.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;easy_install&lt;/code&gt; itself is only quasi-maintained.&lt;/li&gt;
    &lt;li&gt;pip comes with the official Python 2.7 and 3.4+ packages from python.org, and a pip bootstrap is included by default if you build from source.&lt;/li&gt;
    &lt;li&gt;The various incomplete bits of documentation on installing, using, and building packages have been replaced by the&lt;a href=&quot;https://packaging.pypa.io/&quot;&gt; Python Packaging User Guide&lt;/a&gt;. Python's own documentation on&lt;a href=&quot;https://docs.python.org/3/installing/index.html&quot;&gt; Installing Python Modules&lt;/a&gt; now defers to this user guide, and explicitly calls out pip as &quot;the preferred installer program&quot;.&lt;/li&gt;
    &lt;li&gt;Other new features have been added to pip over the years that will never be in &lt;code&gt;easy_install&lt;/code&gt;. For example, pip makes it easy to clone your site-packages by building a requirements file and then installing it with a single command on each side. Or to convert your requirements file to a local repo to use for in-house development. And so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;I’m very thankful to the authors of the resources that I’ve mentioned in this blog post so far and I don’t claim any ownership of the content. My only intention was to provide access to all these wonderful resources at a single to place to make it easy for others to learn and prepare themselves.&lt;/p&gt;

&lt;p&gt;I’ve tried to cover a lot of Python-related topics that are commonly discussed in interviews. If I’ve skipped something important please do mention in the comments.&lt;/p&gt;</content><author><name>Satwik Kansal</name><email>satwikkansal@gmail.com</email><uri>http://satwikkansal.xyz</uri></author><category term="python" /><category term="interview" /><category term="questions" /><summary type="html">This blog post will cover some of the typical Python questions asked in Interviews when you’re  applying for a Python related job.</summary></entry></feed>